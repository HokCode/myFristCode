8.泛型编程简介
	
	(1)泛型编程
		
		1.支持泛型编程的语言最适合数据结构的学习。

11.异常类构建
	
	(1)异常的类
		
		1.异常的类型可以是自定义类型，匹配依旧是至上而下严格匹配。
		
		2.子类父类赋值兼容性依然适用，所以一般而言：
			
			-匹配子类异常的catch放在上部。
			
			-匹配父类异常的catch放在下部。

	(2)c++库包含充要异常类族

		1.异常类机制是数据结构类依赖的"基础设施"。
		
		异常类功能定义：
			
			ArithmeticException			计算异常
			NullPointerException 		空指针异常
			IndexOutOfBoundsException	越界异常
			NoEnoughMemoryException		内存不足异常
			InvalidParameterException	参数错误异常

	(3)类包含的内容	

		1.异常信息
			
			-c++规定析构函数不管是否为纯虚函数，都需要提供实现。
		
			-strdup(s)：将s字符串复制到堆内存中。
			
			-itoa(line, s1, 10)，将line函数转换为字符串存入sl中。
			
			-__FILE__宏可返回当前文件。
			
			
			
		2.异常类所在的行数

			-__LINE__宏可返回行数。
	
	(4)代码库设计原则
		
		1.在复用代码库设计时，尽量使用面向对象技术进行架构。
		
		2.尽量使用异常处理机制分离正常逻辑和异常逻辑。

12.顶层父类的创建
	
	(1)软件架构实践经验
		
		1.尽量使用单重继承的方式进行系统设计。

		2.尽量保持系统只只存在单一的继承树。
		
		3.尽量使用组合关系代替继承关系。

	(2)设计父类DTlib::Object类的意义
		
		1.遵循经典设计准则，所有数据结构都继承自Object类。
		
		2.定义动态内存申请的行为，提高代码的移植性。

	(3)总结
		
		1.Object类用于统一动态内内存申请的行为，申请堆内存失败时返回NULL。

		2.Object类的析构函数是纯虚函数，Object类为纯虚父类，所以所有子类都可进行动态类型识别。

		3.析构函数定义为虚函数，防止内存泄漏。

13.类族结构的进化
	
	(1)改进类族结构
		
		1.Exception类继承自Object类。堆空间创建异常对象失败时，返回NULL指针。
		
		2.新增InvalidOperationException异常类。成员函数调用时，如果状态不正确则抛出异常。
		
		3.SmartPoint类继承自Object类。堆空间中创建智能指针对象失败时，返回NULL指针。

