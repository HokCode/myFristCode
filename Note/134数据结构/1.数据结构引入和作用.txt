1.高手程序员
	
	(1)程序优劣评鉴
		
		1.尽量少的时间。		
		2.尽量少的步骤。
		3.尽量少的内存。

	(2)数据结构
		
		1.主要研究非数值计算问题。
		
2.数据艺术
	
	(1)逻辑结构
		
		1.集合结构：数据元素之间没有特别的关系，仅同属相同集合。
		
		2.线性结构：数据元素之间是一对一关系。
		
		3.树形结构：数据元素之间存在一对多的层次关系。
		
		4.图形结构：数据元素之间是多对多的关系。

	(2)物理结构
		
		-逻辑结构在计算机中的存储形式
		
		1.顺序存储结构：将数据存储在地址连续的存储单元里。
		
		2.链式存储结构：将数据存储在任意的存储单元；通过保存地址的方式找到相关联的数据元素。

3.4.程序的灵魂
	
	(1)影响算法效率的主要因素
				
		1.算法采用的策略和方法。
		
		2.问题的输入规模。
		
		3.编译器所产生的代码。
		
		4.计算机执行速度。

		
	(2)算法的度量
	
		-事后统计法
			
			1.不容易准确度量算法的效率。
			
		-事前分析估算法
		
			1.通过计算操作数量度量算法效率。
			
			2.判断时可忽略操作数量中的常数项和其他次要项，只关注最高阶项来得出结论。

5.算法的时间复杂度
		
	(1)算法的复杂度
		
		1.时间复杂度：算法运行后对时间需求量的定性描述。
		
		2.空间复杂度：算法运行后对空间需求量的定性描述。

	(2)大O表示法
		
		1.算法效率严重依赖于操作(Operation)数量。
		
		2.操作数量的估算可作为时间复杂度的估算。
		
		3.在判断时首先关注操作数量的最高次项。

		4.常见时间复杂度：线性阶、平方阶和对数阶。

6.算法效率的度量
	
	(1)常见时间复杂度比较
		
		O(1) < O(logn) < O(n) < O(n*logn) <O(n平方)

			< O(N3次方)
			
			< O(2的n次方) < O(n!) < O(n的n次方)

		1.实际的程序运行时间控制在第一二行的复杂度。

	(2)算法的最好与最坏情况
		
		1.当算法在最坏情况下仍满足要求，则算法的最好和平均情况都满足需求。

		2.没有特殊说明时，分析算法的时间复杂度都是指最坏时间复杂度。
		
	(3)算法的空间复杂度
	
		-定义：S(n) = S(f(n))
	
			-n为算法的问题规模
			
			-f(n)为空间使用函数，与n相关。

		1.指导时间复杂度的方法同样适用于空间复杂度。如算法所需要的空间时常数时，空间复杂度为：S(1)。

		2.多数情况下，更关注算法的时间复杂度。可通过增加额外空间来降低时间复杂度。

