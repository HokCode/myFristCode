4.开启QT
	
	(1)通过命令行的方式编译QT源程序
		
		1.启动QT命令行
		
		2.进入源程序所在目录
		
		3.命令：
			
			qmake -project：根据目录中的源码生成工程文件
			qmake：根据工程文件生成makefile
			make：根据makefile进行编译

	(2)可视化集成开发环境QT creator
		
		1.提供了强大的代码编辑功能。
		
		2.提供了强大的调试功能。

		3.调试的基本方法：
			
		Log调试法：
			
			-在代码中加入一定的打印语句。
			-打印程序状态和关键变量的值。
		
		断点调试法
			
			-在开发环境中的对应代码行加入断点。		
			-当程序进行到断点时，程序暂停运行。
			-需要时可加上条件断点，当条件满足才暂停程序运行。
			
5.Qt Creator工程介绍
				
	(1)Qt Creator
			
		1.以工程项目的方式对源码进行管理。

		2.一个工程包含不同类型的文件：
			
			.pro		项目描述文件
			.pro.user	用户配置描述文件，为了针对不同平台
			.h			头文件
			.cpp		源文件
			.ui			界面描述文件
			资源文件(图片、音频等)
			
	(2).pro工程文件
		
		1..pro文件与makefile比较类似。用于配置和组织整个项目的相关信息。
		
		2.描述文件的基本构成：
			
			#			注释起始符
			QT			模板声明
			TARGET		可执行文件名
			TEMPLATE	程序模板声明
			INCLUDEPATH	指明项目头文件搜索路径，以\换行。
			SOURCES		源文件说明
			HEADRES		头文件
			FORMS		界面描述文件.ui
			RC_FILE		资源文件声明
			LIBS		界面文件声明
			
			CONFIG
		
		(3)CONFIG配置
			
			1.CONFIG用于设定项目的配置信息和编译选项。
			
			2.常用选项
				
				-debug：构建debug调试版本的执行程序
				-release：构建release版本的执行程序
				-debug and release：同时构建
				-warn on：尽可能多的出警告信息
				-warn off：不输出警告信息
			
		(4)工程中的概念
			
			-构建(bulid)
				对项目中的所有文件进行编译，最终生成可执行程序。
			
			-Debug版
				可以进行程序调试的构建版本。
				可执行程序中包含调试信息，运行效率不高。
			
			-Release版
				最终发布的应用程序构建版本。
				无调试信息，运行效率高。
			
6.窗口组件及窗口类型
				
	(1)窗口组件
		
		1.图形用户界面由不同的窗口和窗口组件构成。
		
		2.<QtGui>头文件包含窗口组件，对应Qt中的GUI模块。
		
		3.Qt以组件对象的方式构建图形用户界面。
			
		4.组件的类型：
			
			容器类(父组件)：用于包含其他的界面组件。
			功能类(子组件)：用于实现特定的交互功能。
			
			Qt中没有父组件的顶级组件叫做窗口。
			
	(2)QWidget
		
		1.所有窗口组件类都继承于QWidget类。
		
		2.QWidget类继承自QObject类和QPaintDevice类
			
			-QObject是所有支持Qt对象模型的基类。
			
			-QPaintDevice是Qt中所有可绘制组件的基类。(自绘能力)
			
		3.QWidget组件
			
			-能够绘制自己和处理用户输入。
			
			-Qt中所有窗口组件类的父类(Super Class)。
			
			-所有窗口组件的抽象。
			
			-每个窗口组件都是一个QWidget。
			
			-QWidget类对象常作为父组件或顶级组件使用。
			
	(3)QLable组件
		
		1.用于显示一个提示性字符串。
		
		2.功能性组件，一般需要父组件作为容器。例：
			
			QWidget w;		//生成QWidget对象，顶级组件
			QLabel l(&w);	//生成QLabel对象，其父组件为QWidget	
			
			l.setText("This is a Label control.");
			w.resize(400, 300);	//改变大小
			
	(4)窗口类型(QWidget的第二个参数flag)
		
		1.窗口类型：
			
			-Qt::Dialog		对话框类型
			-Qt::Window 	主窗口类型
			-QT:SplashScreen启动画面类型
			
		2.窗口标志：
			
			-Qt::WindowStaysOnTopHint
				顶层窗口，不会被遮挡。
				
			-Qt::WindowContextHelpButtonHint	
				生成帮助按钮，去掉最大化最小化按钮。
			
7.Qt中的坐标系统
				
	(1)坐标系统
		
		1.GUI操作系统都有特定的坐标系统。
		
		2.图形界面程序在坐标系统中进行窗口和部件的定位。
			
		3.定位类型：
			
			-顶级窗口部件的定位。
			
			-窗口内部件的定位。
			
			-窗口部件的大小设置。
			
	(2)Qt坐标系统
		
		1.Qt使用统一的坐标系统定位窗口部件的位置和大小。
		
		2.Qt部件类提供成员函数在坐标系统中进行定位。
		
		3.QWidget类提供了窗口部件所需的坐标系统成员函数。
			
	(3)坐标系统相关的成员函数
		
		1.坐标系相关函数：
			
			x()、y()
				代表包括边框x、y
			
			width()、height()
				代表客户区的width、height
			
			geometry().x()、.y()、width()、height()
				代表客户区的x、y、width、height
			
			frameGeometry().x()、.y()、width()、height()
				代表包括边框的x、y、width、height
			
		2.geometry()和frameGeometry()必须在show()调用后才有效。因为代码运行的平台不确定。
			
			
	(4)QWidget类提供了成员函数	
			
		1.改变窗口部件的大小
			
			void resize(int w, int h)
			void resize(const QSize &)
			
			每个操作系统都有限定最小的宽度和高度。
			
		2.改变窗口部件的位置
			
			void move(int x, int y)
			void move(const QPoint &)
			
	(5)QPushButton组件<QPushButton>
		
		1.用于接受用户点击事件。

		2.能够显示提示性字符串。
		
		3.功能性组件，需要父组件作为容器。
		
		4.能在父组件中进行定位。
		
		例子：
			
		QWidget w;
		QPushButton b(&w);
		
		b.setText("Button");
		b.move(10, 10);
		b.resize(100, 25);
			
	