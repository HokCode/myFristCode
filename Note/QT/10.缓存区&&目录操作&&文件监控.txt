34.缓冲区操作与目录操作
	
	(1)Qt中缓冲区的概念
		
		1.缓冲区的本质为一段连续的存储空间。
		
		2.QBuffer是Qt中缓冲区相关的类。
		
		3.在Qt中可以将缓冲区看作一种特殊的IO设备。
		
		4.文件流辅助类可以直接用于操作缓冲区。
		
		使用方式：
			
			QByteArray array;
			QBuffer buffer(&array);
			
			if( buffer.open(QIODevice::writeonly) )
			{
				QDataStream out(&buffer);
				
				out << QString("test");
				
				buffer.close();
			}

	(2)QBuffer缓冲区的使用场合
		
		1.在线程间进行不同类型的数据传递。
		
		2.缓存外部设备中的数据返回。
		
		3.数据读取数据小于数据写入速度。 

	(3)Qt中的目录操作
		
		QDir是Qt中功能强大的目录操作类
		
		1.Qt中的目录分隔符统一使用'/'。		
		2.能对目录进行任意操作：创建、删除、重命名。		
		3.能获取指定目录中的所有条目：文件和文件夹。		
		4.能使用过滤字符串获取指定条目。		
		5.能获取系统中的所有根目录。

		使用例子：
			
		const char* PATH = "c:/Users/Desktop/QDir";
		QDir dir;
		
		if( !dir.exists(PATH) )
		{
			dir.mkdir(PATH);
		}
		
		if( dir.exists(PATH) )
		{
			dir.cd(PATH);
			
			QStringList list = dir.entryList();
				//获取当前文件夹下的条目
			
			for(int i=0; i<list.count(); i++)
			{
				qDebug() <<　list[i]
			}
		}

		QFileInfoList list = dir.entryInfoList();
			//获取当前文件夹下的文件和文件夹的路径。	
	
		list[i].fileName();
			//获取文件名。

		list[i].absoluteFilePath();
			//获取文件的绝对路径。

	(4)Qt中的文件系统监视器
	
		QFileSystemWatcher用于监控文件和目录的状态变化
		
		1.能够监控特定目录和文件的状态。
		2.能够同事对多个目录和文件进行监控。
		3.当目录或文件发生改变时将触发信号。
		4.可通过信号与槽的机制捕捉信号并做出响应。
		5.内容被修改、重命名、被删除等都是发生改变。
	
		使用例子：
		
		void Watcher::statusChanged(const QString& path)
		{
		
		}
			//定义槽函数，监控状态变化。

		Watcher::Watcher(QObject* parent) : QObject(parent)
		{
			connect( &m_watcher, SIGNAL(filechanged(const Qstring&)), ... );	//文件改变
			
			connect(&m_watcher, SIGNAL(directorchanged(const Qstring&)), ...);	//文件夹改变
		}

		void Watcher::addPath(QString path)
		{
			m_watcher.addPath(path);	//被监控的文件路径。
		}



