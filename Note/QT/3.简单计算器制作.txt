8.第一个应用程序——计算器
	
	(1)QLineEdit组件
		
		1.用于接受用户输入。
		
		2.能够获取用户输入的字符串。
		
		3.功能性组件，需要父组件作为容器。
		
		4.能够在父组件中记性定位。
		
		使用例子：
		
		QWidget w;
		QLineEdit le(&w);
		
		le.setAlignment(Qt::AlignRight); //设置显示的字符右边对齐

	(2)完善的问题
		
		1.计算器不需要最大化最小化按钮。
			
			利用Qt::WindowCloseButtonHint
		
		2.计算器的窗口需要固定大小。
		
			void QWidget::setFixedSize(int w, int h)
		
		3.文本框不能直接输入字符。

			void setReadOnly(bool)

9.计算器界面代码重构
		
	(1)重构的概念
		
		1.以改善代码质量为目的代码重写
		
			-使其软件的设计和架构增加合理。
			
			-提高软件的扩展性和维护性。

			-不能影响已实现的功能，只考虑架构的改善。

10.Qt中的消息处理
	
	(1)Qt消息模型
		
		1.Qt封装了具体操作系统的消息机制。
		
		2.Qt遵循经典的GUI消息驱动事件模型。

	(2)信号与槽
		
		1.信号(Signal)。由操作系统产生的消息。
		
		2.槽(Slot)。程序中的消息处理函数。
		
		3.连接(Connect)。将系统信息绑定到消息处理函数。

		4.Qt中信号的传递必须在对象之间。

	(3)Qt的核心——QObject::connect函数
	
		1.函数模型：
			
		bool connect(	const QObject* sender;	//发送对象
						const char* signal;		//消息名
						const QObject* receiver;//接收对象
						const char* method;	//接受对象的处理函数
						Qt::ConnectType type = Qt::AutoConnection
					);

	(3)Qt中的"新"关键字
		
		-SIGNAL。用于指定消息名。
		
		-SLOT。用于指定消息处理函数名。
		
		-Q_OBJECT。必须在所有自定义槽的类的声明开始处加上。

		-slots。用于在类中声明消息处理函数。

		使用例子：
		
		QPushButton b;
		
		b.setText("Click me to quick");
		b.show();
		
	QObject::connect(&b, SIGNAL(clicked()), &a, SLOT(quick()));

	(4)自定义槽
		
		1.只有QObject的子类才能自定义槽。

		2.定义槽的类必须在声明的最开始处使用Q_OBJECT。
		
		3.类中声明槽时需要使用slots关键字。
		
		4.槽与所处理的信号在函数签名上必须一致。

		5.SIGNAL和SLOT所指定的名称中：
			
			-可以包含参数类型。
			
			-不能包含具体的参数名。

	(5)sender函数
		
		1.返回指针，指针指向信号发送者。

	(6)经典问题Object::connect::No such slot

		1.检查是否继承于QObject；
		
		2.类的声明的开始处是否添加Q_OBJECT
		
		3.检查是否使用slots关键字进行槽声明；
		
		4.槽的名称是否拼写错误
		
		5.重新执行qmake。

11.Qt中的字符串类
	
	(1)STL标准库

		1.STL的具体实现依赖于编译器生产产商。
		
		2.STL的"标准"只是指其接口是标准的：
			
			-相同全局函数。
			
			-相同算法类和数据结构类。
			
			-相同类成员函数。
		
		3.不同厂商的编译器所带的STL存在差异，依赖STL开发的c++程序在不同平台上的行为可能出现差异。
		
	(2)Qt中的字符串类	
		
		1.采用Unicode编码。即支持各种语言。
		
		2.采用隐式共享技术，节省内存和不必要的数据拷贝。
		
		3.可跨平台使用。
			
	(3)string类成员函数介绍
		
		string s;
		
		s.sprintf();	//用法与C中的printf相同。
		
		s.indexof(".");	//获得s字符中.的位置。
		
		s.mid(0, index);//提取s字符中0到index的部分。
		
		s.trimmed();	//去掉s字符中前后的空格。
		
		s.remove(index, 2);
			//从index位置开始删除s字符串中的2个字符

		1.Qt的字符串可以进行字符串大小比较。


