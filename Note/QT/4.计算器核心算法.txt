12.计算器核心解析算法——分离数字和运算符
	
	(1)中缀表达式与后缀表达式
	
		1.中缀表达式符合人类的阅读和思维习惯。
		
		2.将运算符放在数字后面为后缀表达式，后缀表达式符合计算机的运算符方式。

			-消除了中缀表达式中的括号。
			
			-同时保留中缀表达式中的运算优先级。
	
	(2)核心算法解决方案
		
		1.将中缀表达式进行数字和运算符的分离。
		
		2.将中缀表达式转换为后缀表达式。
		
		3.通过后缀表达式计算最终结果。

	(3)Qt知识
		
		1.Qchar类型，用于表示Unicode字符。

		2.s.toDouble(bool)。字符串转化成浮点数，成功返回true。失败返回false。

		3.Qt提供了数据结构：队列<QQueue>、栈<QStack>。

			使用队列例子：
				
				QQueue<QString> split(const QString& exp);

13.计算器核心解析算法——中缀表达式转换为后缀表达式
	
	(1)转换过程类似编译过程
		
		1.四则运算表达式中的括号必须匹配。
		
		2.根据运算符优先级进行转换。
		
		3.转换后的表达式中没有括号。
		
		4.转换后可以顺序的计算出最终结果。

	(2)转换过程
	
		1.当前元素e为数字：输出。
		
		2.当前元素e为运算符：	
			
			-与栈顶运算符进行优先级比较。
			
			-小于等于：将栈顶元素输出，转1。
			
			-大于：将当前元素e入栈。

		3.当前元素e为左括号：入栈。
		
		4.当前元素e为右括号：
			
			-弹出栈顶元素并输出，直至栈顶元素为左括号。
			
			-将栈顶的左括号从栈中弹出。

		注意：
			-合法的四则运算表达式中，括号匹配成对出现。
			
			-左括号必然先于右括号。
	
	(3)公式
		
		QQueue<Qstring> exp;
		Qstring e = exp.isdequeue;	//让队列头元素出列。
		
		QStack<Qstring> stack;
		stack.pop();	//弹栈。
		stack.push();	//压栈。
			
	(4)总结
		
		1.后缀表达式是程序计算复杂表达式的基础。
		
		2.中缀到后缀的转换是基于栈数据结构的。
		
		3.转换过程能够发现表达式中的语法错误。

14.计算器的核心算法——后缀表达式计算
	
	(1)遍历后缀表达式中的数字和运算符
		
		1.当前元素为数字：进栈。
		
		2.当前元素为云算法：
			
			-从栈中弹出右操作数。
			
			-从栈中弹出左操作数。

			-根据符号进行运算。
			
			-将运算结果压入栈中。

		3.遍历结束：
			
			-栈中的唯一数字为运算结果。
			
			-如果结束后栈中有1个以上数字，代表用户输入错误。

	(2)公式
		
		Qstring ret;		
				
		double lp = l.toDouble();
		double rp = r.toDouble();
			将字符串转换为double类型。
		
		ret.sprintf("%f", lp + rp);
			将计算结果转换为字符串，再给予ret。

15.用户界面与业务逻辑的分离
	
	(1)基本程序架构包含：
		
		1.用户界面模块(UI)
			
			-接受用户输入及呈现数据。
			
		2.业务逻辑模块(business logic)
			
			-根据用户需求处理数据。

	(2)功能模块之间需要进行解耦
		
		核心思想：强内聚，弱耦合。
		
		1.每个模块应该只实现单一的功能。
		
		2.模块内部的子模块只为整体的单一功能而存在。

		3.模块之间通过约定好的接口进行交互。
	
	(3)工程中的接口
		
		1.广义：一种契约。协议、语法、格式等。
		
		2.狭义：
			
			-面向过程：一组预定义的函数原型。
			
			-面向对象：纯虚类(c#和JAVA直接支持接口)

	(4)接口设计原则
		
		1.模块之间仅通过接口进行关联
			
			-必然存在模块会使用接口。
			
			-必然存在模块实现对应接口。
			
		2.模块间的关系是单向依赖的。
		
			-避免模块间存在循环依赖的情况。

	(5)计算器例子
		
		1.纯虚类，功能接口。让UI依赖接口(组合)，让Dec实现接口功能(继承)。
		
class ICalculator
	{
	public:
		virtual bool expression(const QString& exp) = 0;
			//接收用户的四则运算表达式。
			
		virtual QString result() = 0;
			//得到表达式计算结果
	}		
			
		2.QCalculator类，用于将两个类联系起来。

class QCalculator
	{
	protected:
		QCalculatorUI* m_ui;
			//成员变量为二阶构造，所在类也要二阶构造。
			
		QCalculatorDec m_cal;
		
		
		QCalculator();
		bool counstruct();
	public:
		static QCalculator* NewInstance();
		void show();	//调用show函数。
		~QCalculator();
	}
















































