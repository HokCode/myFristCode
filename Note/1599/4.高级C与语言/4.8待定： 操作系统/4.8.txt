4.8
	1.操作系统
		
		(1)了解操作系统
			1.当前计算机技术的发展、计算机性能和资源的增加，为了更加合理地利用资源、提升效率，代码需要分工，所以产生了操作系统。
			
			2.操作系统的代码本身不产生价值，其主要任务是管理所有资源，为直接生产价值、直接劳动的那些程序(各种应用程序)提供服务。所以操作系统既是管理者也是服务者。
			
			3.软件系统应该选裸机还是操作系统，取决于产品本身的复杂度。只有极简单的功能、使用极简单的CPU(譬如单片机)的产品才会选择用裸机开发。一般的复杂性产品都会选择基于操作系统来开发。
			
		(2)操作系统的调用通道：API通道
			
			1.操作系统与应用程序之间的通道。当应用程序需要使用资源(内存、CPU、硬件操作)时，通过API向操作系统发出申请，然后操作系统响应申请，帮助应用程序执行功能。
			
		(3)C库函数和API的关系
			
			1.单纯的API只提供了简单没有任何封装的服务函数，应用程序用起来不好用。所以就对API进行二次封装，于是就成了C库函数。
			
			2.有时完成一个功能，库函数可以完成，API也可以完成，选哪个都可以。封装目的：添加缓冲机制。
			
		(4)不同平台(windows、linux、裸机)下库函数的差异
			
			1.不用操作系统API是不同的。完成一个任务的API不同。
			
			2.库函数在不同操作系统不同，但是相似性比起API更高一些。因为人下意识屏蔽不同操作系统的差异，所以封装API成库函数都使用同一套接口。但是使用起来有差异。所以就出现了可移植性。
				
			3.跨操作系统可移植平台，如：QT 、JAVA语言。 
			
		(5)操作系统重大意义
			
			软件体系的分工：有了操作系统，做一个产品时可分为2部分团队，一个团队负责做操作系统(开发驱动,下层)，一个团队负责用操作系统实现具体功能(开发应用上层)。
			
	2.main函数返回值
		
		(1)函数为什么需要返回值
			
			1.函数设计了参数和返回值。参数时函数的输入，返回值是函数的输出。
			
			2.形式上说，一个函数被另一个函数所调用，这个函数的返回值就作为另一个函数式的值。
			
		(2)main函数被谁调用
			
			1.C语言规定了main函数是整个程序的入口。其他函数只有直接或间接地被main函数所调用才能被执行。
			
			2.main函数从某种角度来讲代表了当前的程序，main函数开始意味着整个程序开始执行。
			
			3.main函数在哪种被调用的方法
				
		(3)linux下一个新程序执行的本质
			
			1.linux中在命令行中用 ./xx执行一个可执行程序。
			
			2.可以通过shell脚本调用执行一个程序。
			
			3.在程序中去调用执行一个程序(fork exec)
			
			总结：
			多种执行程序的*本质*都是相同的，linux中一个程序的执行，本质就是一个进程的创建、加载、运行、消亡，就是创建一个进程然后把程序放进去执行直到结束。
			
			在linux中进程都是被它的父进程fork出来的。
			
			命令行本身就是一个进程，在命令行输入 ./xx 执行一个程序，这个新程序就是作为命令行进程的一个子进程来执行。
			
			所以，main函数返回值返回给这个函数的父进程。父进程调用子进程来执行一个任务，子进程执行完后通过main函数的返回值(答复)返回给父进程(0表示成功，负数表示失败)。
			
		(4)实践验证获取main的返回值
			
			1.用shell脚本执行程序可以获取程序的返回值。
				
				linux shell用 $? 这个符号来存储表示上一个程序执行的结果。main函数返回的结果默认是int型的。
			
	3. argc、argv与main函数的传参
		
			(1)谁给main函数传参
				
				1.调用main函数所在程序的父进程给main函数传参，并接收main的返回值。
			
			(2)为什么要给main函数传参
				
				1.父进程调用子进程不一定要传参
					
					int main(void)
				
					这种形式就表示不必要给main传参。  
			
				2.但是有时候我们希望程序中有一种灵活性，通过传参在执行程序时控制程序的运行。
				
			(3)表面上实现给main函数传参。
					
				通过给main传参，让程序运行时去选择执行哪个，从而得到不同的效果					
				
				int main(int argc, char *argv[])
				argc是int类型，表示运行过程的时候给main函数传递了几个参数；argv是一个字符串数组，数组中每个字符串就是我们给main函数传的一个参数。
				
				agrv中有agrc个元素(字符串)。
				
				argv[0]是我们传给main的第一个函数，argv[1]是我们传给main的第二个函数……(以此类推)。
				
				譬如：
					
					#include<stdio.h>
					#include<string.h>

					int main(int argc, char *argv[])
					{
						printf("argc = %d\n",argc);
						
						if(argc != 2)
						{
							printf("enter two or more num please!\n");
							return -1;
						}
						
						if(!strcmp(argv[1], "0"))
						{
							printf("your num is 0 !\n");
						}
						
						if(!strcmp(argv[1], "1"))
						{
							printf("your num is 1 !\n");
						}
						
						return 0;
					}

			(4)本质上实现给main函数传参
				
				1.程序调用的方法有很多，这些方法的本质都是父进程fock一个子进程，然后子进程和一个程序绑定起来去执行(exec函数族)，我们在exec的时候可以给它同时传参。
			
				2.程序调用时可以被传参(给main传参)是操作系统层面的支持完成的。
			
			(5)给main函数传参注意事项
				
				1.main函数传参都是通过字符串传递的。
				
				2.程序被调用时传参，各个参数之间是通过空格来间隔的。
			
				3.在程序内部如果要使用argv[]，那一定要先检验argc。
			
				
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			