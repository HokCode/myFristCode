4.9
	1.链表
		
		(1)链表的引入
			
			因为结构体的缺陷，所以引出两个新的数据结构。
				
			1.结构体：允许其中的数据类型不相同。
			2.链表：元素个数可以实时扩展大小。
			
		(2)链表是什么
			
			1.链表就是用锁链连接起来的表，这里的表值得是一个一个的节点。节点中的一部分内存存储数据(表)，一部分存指针的地址，指针指向下一个节点。
			
			2.链表是由若干个节点组成的，节点是由有效数据和指针组成的。
			
		(3)链表的作用
			
			1.链表相当于一个大小可以动态扩展的灵活链表，需要多少就动态分配多少个。
			
			2.链表就是用来存储数据的，链表定义与结构体定义类似。
			
	2.单链表
		
		(1)单链表的构成
			
			与结构体类似，节点内有数据和指针。
			
		(2)单链表使用堆
			
			1.链表的内存要求比较灵活，所以使用堆内存。
			
			2.申请对内存步骤：
				
				(1)申请大小为一个节点大小堆内存(用代码检查是否申请成功)。
		
				(2)清理堆内存。
			
				(3)填充新节点的有效数据和指针区域。
			
				代码：
					
					struct node
					{
							int data;
							struct node *pNext;
					}
			
					int main(void)
					{
						struct node *p = (struct node *)malloc(sizeof(struct node));
						
						if(NULL = p)
						{
							printf("malloc error.\n");
							return -1;
						}
						
						bzero(p, sizeof(struct node));
						//清理堆内存。memset()也可以。
						
						p->data = 1;
						p->pNext = NULL;
						
						return0；
					}
			
			3.链表头指针

				(1)头指针是指向链表首节点的指针。
				
	3.单链表的算法之插入节点
		
		(1)访问每个节点的数据
			
			1.访问时候只能通过头指针来访问链表节点。
			
			2.前一个节点内部的pnext指针能帮助我们找到下一个节点。
				
		(2)将创造节点封装成一个函数
			
			1.封装时的关键点就是函数的接口(函数参数和返回值)的设计。
		
		(3)从链表头部插入新的节点
			
			让phead指针指向新节点，新节点的pnext指针指向一个原本的第一个节点，这样新节点就成为了新的第一个节点。
			
		(4)从链表尾部插入新的节点	
			
			让链表最后的节点的pnext指针指向新的节点。
			
			代码：

				ph为head指针，new新节点指针。
				
				void inser_tail(struct node *ph,struct node *new)
				{
					struct node *p = ph;
					
					while(NULL != p->pNext)
					{
						p = p->next;	//	往后走一节点
					}

					p->next = new;	
				
				}
			
	4.单链表的算法之插入节点2
		
		(1)链表头部插入函数
			
			1.在定义新节点之前，必须先定义头节点。但这样导致程序看起来不美观。
			
			2.有一种解决方法：头指针只作为指向第一个节点的指针使用，数据部分是空的(或者记录着节点总数)。
			
			
			3.找到一个节点的地址关键是这个节点的前一个节点，所以插入节点时要注意指针指向顺序。
			
	5.单链表的算法之遍历节点
		
		(1)单链表遍历
		
			1.遍历就是把单链表的每个节点一个接一个拿出来。
			
			2.一个不能遗漏，都要遍历。也不能重复，追求效率。
			
		(2)如何遍历单链表
			
			1.如何遍历一个数据结构，关键是先分析这个数据结构的特点，根据其特点指定遍历算法。
				
				单链表特点：由多个节点组成，头指针+头节点为整个链表的起始，最后一个节点的特征是其节点指针指向NULL。
			
				遍历方法：从头指针+头节点开始，顺着链表每个节点的指针依次访问链表的每个节点，取出关键数据。。当遇到指针指向NULL的节点，返回。	
			
	6.单链表的算法之删除节点
		
		(1)删除节点的2个步骤
			
			1.找到需要删除的节点
			
				(1)通过遍历来查找节点。
			
			2.删除这个节点
			
				(1)非尾节点
				
					三个相邻的节点a, b, c,若要先出b节点。首先让a->next = c; 然后free(b)。
			
				(2)尾节点
				
					先把倒数第二个节点的指针指向NULL，在释放尾节点的内存。
			
	7.单链表的算法之逆序
		
		(1)把链表中所有的有效节点(不包含头节点)的顺序颠倒。
			
		(2)单链表逆序算法分析
			
			1.为了对一个数据结构进行操作，我们需要一套算法。这就是数据结构和算法的关系。
				
			2.算法有2个层次：	
			
				第1个层次：数学和逻辑上的算法。
				第2个层次：用编程语言实现算法。				
			
				思路：
					首先遍历链表，然后将原链表中的头指针和原节点作为新链表的头指针和头节点。再将原链表的有效节点挨个用头插入的方法插入新节点。
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			