4.9	
	12.linux内核链表
		
		(1)双链表的缺陷
			
			1.定义数据区域时直接int XXX，我们认为链表中需要存储的是一个int类型的数。但是实际上现实编程中链接的节点是更加复杂的，是多种多样的。
			
			2.一般项目中的链表，节点中存储的数据其实是一个结构体，结构体中包含若干个成员，这些成员构成了我们的节点数据区。
			
		(2)解决思路：节点数据区封装为一个结构体
			
			1.内部数据区的结构体是多种多样的，这样导致我们不能用一个泛性的、普遍适用的操作函数来访问所有链表。
			
			2.不同链表虽然不能用通用代码，但是实际上内部的思路和方法是相同的，只是函数的局部区域不同。
			
			总结：
				
				把不同链表的共同操作方法提取出来用一套方法实现，不同的部分再特殊处理。(节点创建、插入、删除、遍历等等)
			
		(2)内核链表的设计思路
			
			1.内核链表中自己实现了一个纯链表(没有数据区域，只有前后指针)的封装，以及纯链表的各种操作函数(节点创建、插入、删除、遍历等等)。
			
		(3)list.h简介
			
			1.内核中核心纯链接的实现在include/linux/list.h文件中(纯链表完整封装)。( #include<linux/list.h> )
			
	13.内核链表的节本算法和使用简介
		
		(1)内核链表的节点创建
			
			(参考list.h)
			
		(2)内核链表的使用实践
			
			1.将内核链表作为将来整个数据结构的结构体的一个成员内嵌进去。
			
				譬如(简洁版)：
				
				#include<linux/list.h>
				
					struct info
					{
						int data;				//简洁版
					}
			
					
					struct driver
					{
						char name[20];			//驱动名称
						int id;					//驱动id编号
						struct driver_info info;//驱动信息
						struct list_head head;	//内嵌的内核链表成员
					}
				
				分析：前三个成员都是数据区域成员，第4个成员是一个struct list_head类型的变量，即纯链表。
			
				原本driver的结构体是没有链表的，也无法用链表管理。内嵌的head成员是一个纯链表，所以driver通过head成员给自己扩展了链表功能。
			
				driver扩展了链表功能，就可以通过利用list_head来实现链表的各种操作方法来操作head。
			
				最终效果：
					
					我们可以通过遍历head来实现driver的遍历。遍历head的函数在list_h中已事先写好。
			
					通过操作head来操作driver，实质上就是通过操作结构体的某个成员变量来操作整个结构体变量。
			
	14.状态机
		
		(1)有限状态机
			
			1.常说的状态机FSM。FSM指的是有有限个状态(一般是一个状态变量的值)。这个机器能够同时从外部接收信号和信息输入，机器在接收到外部输入的信号后，会综合考虑目前自己的状态和用户输入的信息，然后机器跳转到另一个状态。	
			
			2.状态机关键点：当前状态、外部输入、下一个状态。
			
		(2)两种状态机：Moore型和Mealy型
			
			1.Moore型状态机特点：输出只与当前状态有关(与输入信号无关)。相对简单，考虑状态机的下一个状态时，只需考虑它的当前状态。
			
			2.Mealy型状态机的特点:输出和当前状态和输入信号都有关，状态机接收到一个输入信号需要跳转到下一个状态时，状态机综合考虑2个条件(当前状态、输入值)再决定跳去哪个状态。
			
		(3)状态机主要用途：电路设计、FPGA程序设计、软件设计
			
			1.
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			