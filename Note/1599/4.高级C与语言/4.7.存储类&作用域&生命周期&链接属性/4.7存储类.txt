4.7.(3.4.)储存类关键字
		
		(1)auto	
			
			auto关键字在C语言中只有1种用法
			1.修饰局部变量，表示这个局部变量是自动局部变量，自动局部变量分配在栈上。
			
			2.定义局部变量时就是定义auto的，只是省略了auto关键字而已。所以auto的局部变量其实就是默认定义的普通局部变量。
			
		(2)static
			
			static关键字在C语言中有2种用法，两种用法彼此没有任何关联。
			
			1.用来修饰局部变量，形成静态局部变量。
			
				静态和非静态局部变量的区别：存储类不同(数据段/bss段、栈)。
			
			2.用来修饰全局变量，形成静态全局变量。
				
				静态和非静态全局变量的区别：静态全局变量是内链接属性、非静态全局变量是外链接属性。
				
			3.代码：
				
				static int a = 12;
			
			拓展：
				
				1.静态局部变量和全局变量
					
					(1)存储类、生命周期一样。
					
					(2)作用域、链接属性不一样。
							
						静态局部变量：作用域在代码块(和普通变量一样)，链接属性为无链接。
						
						全局变量：作用域是文件作用域(和函数相同)，链接属性是外链接。
			
		(3)register
			
			register只有一个作用。
			1.register修饰的变量编译器会尽量将它分配在寄存器上。分配在寄存器中，读写效率会提高很多。多用于修饰高频率使用的变量，提升程序运行效率。
			
			2.uboot中用到一个register类型的变量gd，gd(global data)这个变量是用来存uboot的全局变量。gd在整个uboot中到处都被访问。
			
			3.编译器只是尽量把register修饰的变量放在寄存器中，但是不保证，因为寄存器数量是有限的，不一定有空用。
			
			4.代码：
				
				register int a = 12;
			
		(4)extern
			
			1.声明全局变量，声明的目的主要是在a.c中定义的全局变量在b.c中可以使用。
			
				在a.c定义全局变量后，在b.c中先声明就可以使用。声明就是告诉编译器在别的文件有定义这个变量，原型和声明的一样，将来在链接的适合链接器会在别的.o文件找到这个同名变量。
				
					b.c中定义：int g_d = 4;
					
					a.c中声明：extern int g_d;	//	不用赋值。
			
		(5)volatile
			
			1.volatile的字面意思是：可变的、易变的。C语言中volatile用来修饰的变量可以被编译器之外的东西改变。
			
				编译器之内：意思是变量的值的改变是代码的作用。
				
				编译器之外：意思是变量值的改变不是当前代码造成的。譬如在中断处理程序isr中更改了这个变量的值、多线程中在别的线程更改了变量的值、硬件自动更改了变量的值(一般是寄存器的值)。
			
			2.编译器遇到volatile修饰的变量时就不会对改变量的访问进行优化。	
			
				例子：
					volatile int a, b, c;
					a = 3;
					b = a;
					c = b;	//等效于 c = b = a = 3;	
					
				分析：	编译器无优化情况下，内存要读取3次，写3次。
				
						编译器优化后，内存只读1次，写3次。提升了效率。
						所以如果变量a,b,c有可能被编译器之外改变的话，应该用volatile修饰。但是用volatile会降低程序效率，所以是否加volatile需要程序员自行判断。
						
		(6)restrict
			
			c99才支持，c89编译器是不支持restrict关键字，gcc支持。
			
			1.restrict只用来修饰指针，不能用来修饰普通变量。
					
				restrict修饰指针就是告诉编译器，只能通过该指针访问该指针所指向的内容。
			
			例：
				int fun1 (int *restrict x)
				{
					*x = 0;
					return *x;
				}
			
				分析：加了restrict后，编译器就会把函数(return *x)优化为(return 0),提高了效率。
			
		(7)typedef
			
			重命名。虽然属于存储类关键字，但是实际上和存储类没关系。