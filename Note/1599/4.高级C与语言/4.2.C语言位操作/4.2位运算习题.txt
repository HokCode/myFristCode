口诀：要置1， 用 位或|
	  要清0， 用 位与&
	  要取反，用 取反^
	  最后用~ << >>构建特定二进制数
	  
习题：

		设置：置1。
		清楚：清0。
		
	典型例题
		
		(1)给定一个整形a，取出a的bit3~bit8.
			思路：1.把其他位清零（位与）。			
				  2.把bit3~bit8移到第一位（移位）。
		
		
		(2)用C语言给一个寄存器的bit7~bit17赋值937.
			思路：1.把寄存器bit7~bit17的值清零（位与）。
				  2.给寄存器bit7~bit17复制937（位或）。
				  
		(3)用C语言给一个寄存器的bit7~bit17的值加17.		  
			思路：1.把其他位的数清零（位与），移位并读出其值。	  
				  2.把值加17后，移位至原位。
				  3.把bit7~bit17清零（位与），再把第2步中新值写入bit1~bit17（位或）。
				  
			代码：
				int main(void)
				{
					unsigned int a = 0x302888f8;
					unsigned int tmp;
					
					tmp = a & (0x3ff<<7);
					tmp >>= 7;
					tmp += 17;
					a &= ~(0x3ff<<7);
					a |= (tmp<<7);
					
					printf("a = 0x%x.\n",a);
			
				}
				  
		(4)用C语言给一个寄存器的bit7~bit17赋值937，同时给bit21~bit25赋值17.		  
				  
			思路：参考第二题。
			
			代码：int main(void)
				{
					unsigned int a = 0x302888f8;
					unsigned int tmp;
					
					a &= ~(0x3ff<<7);
					a |= (937<<7);
					a &= ~(0x1f<<21);
					a |= (17<<21);
					
					printf("a = 0x%x.\n",a);
			
				}	  
				  
				合在一起(一般写法)：
				
				 int main(void)
				{
					unsigned int a = 0x302888f8;
					
					a &= ~((0x3ff<<7) | (0x1f<<21));
					a |= ((937<<7)	| (17<<21));
					
					printf("a = 0x%x.\n",a);
			
				}	 
				  
				  
				  
				  
				  
				  
				  
				  