7.Makefile的
	
	(1)通配符%和Makefile的自动推导
		
		1.Makefile中%代表一个或几个字母。如：%.o代表所有以.o为结尾的文件。

		2.在Makefile中，当需要某个目标时，Makefile会试图寻找这个规则中的依赖，如果能找到则会执行这个规则用依赖生成目标。
 
	(2)Makefile中定义和使用变量
		
		1.与shell脚本中非常相似：都没有变量类型，直接使用；用$var引用变量。

	(3)伪目标(.PHONY)
		
		1.伪目标本身不代表一个文件，执行这个目标单纯是为了执行目标下的命令。如：clean。
	
		2.所以伪目标一般都没有依赖，无条件执行。可以在伪目标的前面用.PHONY声明来表明伪目标。如：在clean前加.PHONY clean。

	(4)Makefile的文件名
		
		1.合法文件名有2个：Makefile、makefile。

	(5)Makefile中引用其他Makefile
	
		1.有时如果makefile比较复杂，可分成几个makefile来写。最后在主makefile中用include引用其他的makefile。引用效果就是原地展开。 


8.Makefile补充知识1
	
	(1)Makefile中的注释用#
		
	(2)命令前面的@用来静默执行
		
		1.makefile在默认情况下载执行一行命令前会先把命令打印出来。在命令行之前加@,命令就会直接显示结果，不打印出来，这就叫静默执行。
	
	(3)Makefile中几种变量赋值运算符
		
		?=	如果变量前面并没有赋值过，则执行这条赋值；如果前面已赋值，则自动忽略这条赋值。
		
		+=	用来给一个已经赋值的变量接续赋值。shell和makefile中的变量一般都是字符串，所以+=相当于C中的strcat。
		
		=	最简单赋值		
		:=	大部分情况与=效果一样。
		
		区别：
			1.	= 赋值在解析时取决于最后一次赋值时的值。
			2. := 赋值在解析时取决于上一次赋值时的值。
	
	注意：
		1.在makefile中，赋值符号=两边可以加或或不加空格。
		2.+=中接续赋值会自动在新值前加一个空格。
	
	(4)环境变量
		
		1.在makefile中用export导出的就是环境变量。一般情况下环境变量用大写，普通变量用小写。
	
		2.环境变量类似于整个工程所有makefile之间可以共享的全局变量；普通变量只能在当前版本makefile中使用。
		
		3.makefile执行时可以给其传参。在make时个makefile传的环境变量值优先级是最高的。
	
9.makefile补充知识2
	
	(1)Makefile中常用通配符 
		
		*	代表任意字符
		？	代表1个任意字符
		[]	将[]中的字符依次匹配，中间不需要用空格间隔。如果匹配失败，就会打印[]及里面的内容。

		分析：
			1.%用法与*相似，但%用在规则描述，即目标和依赖所在行，所以%也叫规则通配符。
	
	(2)makefile的自动变量
		
		1.预定义的特殊意义的符号，类似于C语言中的宏。
	
		2.用一些特殊的符号替代某种条件的条件集，可以简化makefile中的描述。
		
		3.常用自动变量
			
			$@	规则的目标文件名
			$<	规则的依赖文件名
			$^	依赖的文件集合
			
		
	
	