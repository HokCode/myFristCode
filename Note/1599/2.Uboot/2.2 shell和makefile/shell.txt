1.shell脚本
	
	
	(1)shell语言
		
		1.编写shell脚本使用的语言叫shell语言，也叫脚本语言。
		2.shell脚本其实是指一类语言。
	
	(2)常用shell语言
		
		1.在linux下常用的脚本语言有bash、sh；perl和python这些高级shell脚本语言常用在网络管理配置等领域。

		2.嵌入式中主要应用脚本语言来做配置。所以不会使用过于复杂的脚本语言特性。

	(3)shell脚本的运行机制：解释运行
		
		1.C语言(C++)编写出的源代码要经过编译链接生成可执行的二进制程序才能运行；shell程序写好源代码即可直接运行。
	
		2.shell程序是解释运行的。即在执行shell程序时，shell解析器会逐行地解释shell程序代码，然后一行行来执行。

2.写shell
	
	(1)编辑器、编译器、运行方法(脚本的3中执行方法)
		
		1.shell程序是文本格式的，所以本文编辑器就可以编写。但是因为换行符不同，windos中编辑器写的shell不能再linux下运行。

		2.因为shell是解释性语言，直接编辑完就可运行。

		3.运行方法：
			第一种：./xx.sh。与运行二进制可执行程序的执行方法一样。但要求shell程序具有可执行权限。
		
			第二种：source xx.sh。source命令是用来执行脚本程序的。

			第三种：bash xx.sh。bash是一个脚本程序解释器，相当于一个可执行程序。xx.sh相当于bash的argv[0]。

	(2)解释shell程序

		1.shell程序第一行一般都是：	#!/bin/sh
		
			解释：以#!开头，后面加pathname(路径)，指定哪个解释器解释执行shell程序。即当前shell会被主机/bin目录下的sh可执行程序执行。在ubuntu上默认的解释器是dash。

		2.脚本中的注释使用#，如果有多行需要注释，每行前面都要加#。

		3.shell程序正文有很多行shell语句构成。
			
			如：echo "hello world."

	(3)理解shell程序

		1.本质就是把在以前命令行键入执行的命令写成了程序。相当于记录手工输入命令过程，这样可以避免在命令行重复手工输入相同命令。

		2.shell编辑完可直接运行。(不需编译)

2.shell编程
	
	(1)shell中的变量定义和引用
		
		1.变量定义和初始化。shell与C语言不同，是弱类型语言(shell中变量没有明确类型)。

			如：string="hello world"
				echo $string
		
		2.变量定义时可以初始化，用=进行初始化赋值。在shell中赋值的=两边不能有空格。shell中变量的定义和赋值没有明确界线。

			注意：shell中语法严格，很多地方空格的有或无都是规定的。

		3.变量引用
			
			引用前需要加$符号。如果$后面的字符串没有被定义，那shell在执行是会把它解析为空，不会报错。
			
			引用方式：$var和${var}。
			例子：
				var="hello"
				echo "${var}you"
			加上{}与you区别开来。最后打印出：hello you。
				
				
	(2)shell中单引号和双引号的区别
		
		1.shell中输出字符串可以不加双引号；但是输出"、$、`、\等转移字符就需要加双引号。
		
		2.单引号就会字面是什么，就输出什么。
		
			例子："\$a"就会输出$a。"$a"就会输出a或者空(a未定义)。

3.shell编程2
	
	(1)shell中调用linux命令
		
		1.直接执行		
		2.反引号括起来执行(`)
		
	(2)shell中的选择分支结构(部分)
		
		if [表达式]; then
			xxx
		else
			xxx
		fi

		1.判断文件是否存在(-f,file)

			if [ -f a.c ]; then
				echo "yes"
			else
				echo "no"
				touch a.c
			fi
			分析：-f前面和a.c后面要加空格。
	
		2.判断目录是否存在(-d,director)
			
		3.判断字符串是否相等("str1" = "str2")

		4.判断数字是否相等
				
			相等(-eq)equal	
			
			大于(-gt)greater than		
			小于(-lt)less than
			
			大于等于(-ge)greater equal
			小于等于(-le)less equal 
			
		5.判断字符串是否为空(-z)	
			
	(3)if判断式中使用"-o"表示逻辑或
				
		例子：if [ "str1" = "str2" -o -f a.c ]
			
	(4)逻辑与&&和逻辑或||与简写的if表达式相结合
		
		简写if表达式：
			
			[ -z $str] || echo "xxxx"
			分析：如果$str为真，echo "xxxx"不会被执行。
			
			[ -z $str] && echo "xxxx"
			分析：$str为真，echo "xxxx"才会执行。
			
5.shell中的循环结构
	
	(1)for循环
		
		简单使用示例：
			
			for i in 1 2 3 4 5
			do
				echo $i
			done
	
	(2)while循环
		
		简单使用示例：
			
			i=1
			j=11
			while [ $i -lt $j ]; do		//判断i是否小于j
				echo $i
				i=$(($i + 1))			//相当于i++
			done
		
		注意:赋值符号=两边不能有空格；加号+两边可以加。

6.shell中其他知识点
	
	(1)case语句(switch case)
	
		简单格式：
			
			var=2
			case $var in
			1) echo "1" ;;
			2) echo "2"	;;
			esac
			
		分析：
			1.shell中case语句不用加break。
			2.每个case语句都要以两个分号结尾。执行多个语句就用单个分号隔开。
	
	(2)调用shell程序的传参
	
		1.C语言中可以通过main函数的argc和argv[]给程序传参。
		2.在shell程序内部会用一些特殊符号来传参，如：
			
			$#：表示调用该shell时传参的个数，只考虑真正的参数。
			$0、$1、$2……：依次表示传参的各个参数。
			
			例子：
			
			source a.sh aa bb cc	$# = 3。$1是第一个有效参数(aa)。
			
	(3)while循环、case语言、传参相结合
		
		1.shell中的break只用于循环跳出。如，当while中内嵌case语句，case中的break是跳出外层while循环的。
		
		2.shell中的$#和$0等内置变量是可通过shift指令改变的。shift指令类似左移运算符，把shell程序的传参左移了一位。即：原来的$2变了$1,$#减少一。
		
			

	(4)echo的创建和追加输入文件

		1.可以通过echo新建文件
			
			echo "test" > a.txt
				分析:创建一个a.txt文件，并把内容test写入这个文件。符号>是创建文件的意思
			
		2.向已经存在的文件追加输入内容：
		
			echo "zhuijia" >> a.txt	
		
				分析：符号>>是在已经存在的文件末尾追加输入内容的意思。
		
	
		
		