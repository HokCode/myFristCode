9.内核启动的C语言阶段嘛6
	
	(1)rest_init函数(操作系统去向)

		1.调用kernel_thread(main.c第440行)启动了2个线程:kernel_init和kthreadd。

		2.调用schedule(main.c第455行)开启内核的调度系统，linux开始运转。

		3.最终调用cpu_idle(main.c第459行)进入死循环。
		
	(2)进程与线程
		
		1.进程：一个进程可以理解为一个运行的程序。这个程序和别的程序是分开的，可以被内核单独调用执行或暂停。
		
		(在linux系统中，线程和进程非常相似。)
		2.线程：一个独立的程序。应用层运行一个程序就构成了一个用户进程/线程，那么内核中运行一个函数(也可看作程序)就构成了一个内核进程/线程。

		3.rest_init中调用的kernel_thread：运行一个函数，实质就是把一个函数变成一个内核线程去运行，让其可被内核调度系统调度。

	(3)进程0、进程1、进程2
		
		1.到cpu_idle时，一共涉及到3个内核进程/线程。
		
		2.操作系统是用一个数字来表示一个进程/线程，这个数字称为进程号，从0开始分配。

		3.可在linux命令行输入ps查看当前系统运行的进程情况。

		4.ubuntu下输入ps -aux可看到当前系统运行的所有进程。进程从1开始，因为进程0不是用户进程，而是内核进程。

		5.三个进程介绍：
		
			进程0：idle进程，称为空闲进程(死循环)。

			进程1：kernel_init函数，称为init进程。(boss)

			进程2：kthreadd函数，称为linux内核的守护进程，为何内核正常运转。

	(4)总结
		
		1.linux内核启动后与uboot启动后的稳定状态不同。
		
		2.进程0是idle进程。

10.进程1——init进程详解1
	
	(1)完成了从内核态向用户态的转变
		
		1.init进程刚运行时是内核态，属于一个内核线程；然后运行了一个用户态下面的程序后把自身转成了用户态。因此后续的进程都可以工作在用户态。

		2.内核态下工作：挂载根文件系统并找到用户态下的init应用程序。所有应用程序都在文件系统中。

		3.用户态下工作：init进程大部分工作都是在用户态下进行。其他用户进程都直接或间接派生自init进程。

		4.init进程在内核态下，通过kernel_execve函数来执行一个用户空间编译链接的应用程序后，即可跳跃到用户态。跳跃过程是单向的，无法回头。

	(2)init接触构建了用户交互界面
		
		1.init进程是其他用户进程的祖宗。linux系统中一个进程的创建是通过其父进程创建出来的。

		2.init进程启动了login进程(登录)、命令行进程、shell进程(解析命令)。
		
		3.shell进程启动了其他用户进程。用户可在命令行下通过./xx的方式来执行其他应用程序，每个程序就是一个进程。

11.进程1——init进程详解2
	
	进入kernel_thread函数(main.c第440行)的参数kernel_init。
	
	(1)打开控制台(main.c第905行)
		
		1.linux系统中，每个进程都有各自的文件描述符表，表中存储的是本进程打开的文件。

		2.linux系统中，设备是以文件的方式来访问的。访问一个设备就要去打开这个设备对应的文件描述符(设备文件)。如：/dev/fb0这个设备文件就代表LCD显示器设备。
		
		3.打开/dev/console文件，并复制了2次文件描述符。共得到了3次文件描述符。分别是0、1、2：标准输入、标准输出、标准错误。

			复制文件描述符：(void) sys_dup(0);

		4.继承于进程1(继承于进程1)的子进程，默认拥有父进程所有文件描述符，因此进程1衍生出的所有进程默认都具有3个文件描述符。

	(2)挂载根文件系统
		
		1.prepare_namespace(main.c第920行)函数中的mount_block_root挂载根文件系统。

		2.uboot给内核传的参数有根文件系统位置与类型。bootargs的参数中
		
			位置：root=/dev/mmcblk0p2 rw；mmc设备的设备0的第二分区。
			类型：rootfstype=ext3

		3.挂载成功串口会打印信息：
			VFS: Mounted root (ext3 filesystem) on device 179:2.

		4.如果内核启动时挂载rootfs失败，内核将无法启动。

		5.挂载rootfs失败，可能原因：
			
			uboot中的传参bootargs错误。(根文件系统位置或类型)
			rootfs烧录失败。
			rootfs本身制作错误(自制)。

	(3)执行用户态下的进程1程序
		
		init_post(main.c第929行)

		1.run_init_process函数(main.c第841行)，函数中调用了kernel_execve来执行init程序。

		2.确定init程序：
			
			方法一：
			从uboot传参cmdline查看是否有指定。cmdline(uboot中的bootargs)中的init=/linuxrc制定了init程序位置，即rootfs下根目录中的linuxrc程序。

			方法二：
			
			四个备用方案			
			run_init_process("/sbin/init");
			run_init_process("/etc/init");
			run_init_process("/bin/init");
			run_init_process("/bin/sh");

			如果两种方法都不行，就无法执行init程序了。

