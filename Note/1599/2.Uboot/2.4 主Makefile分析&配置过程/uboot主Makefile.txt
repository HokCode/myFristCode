1.uboot主Makefile分析1
	
	(1)uboot version版本确定(Makefile 24~29行)
		
		1.uboot版本号分3个级别，如：1.3.4XYZ。分别是：version(主版本号)、PATCHLEVEL(次版本号)、SUBLEVEL(再次版本号)、EXTRAVERSION(附加的版本信息)。

		2.以上四个参数共同构成uboot的版本号U_BOOT_VERSION。
		
		3.include/version_autogenerated.h文件时编译过程中自动生成的一个文件(编译前源目录中没有)。里面的内容是一个宏定义，宏定义的值的内容就是Makefile中配置的版本号。"U-BOOT 1.3.4"

	(2)HOSTARCH和HOSTOS
	
		HOSTARCH：HOST是主机名字，即当前做开发的电脑。ARCH是架构(architecture)，表示CPU的架构。
		
		HOSTOS：Linux。
		
		1.直接在shell中执行uname -m得到i686，这个值代表当前执行这个命令的电脑的CPU版本号。

		2.shell中符号|叫做管道，作用是把|前面运算式的输出作为|后面运算式的输入。

		3.sed -e s/X/Y作用：如果得到的字符串与X匹配，用Y替代X。

2.uboot主Makefile分析2
			
	(1)静默编译(50~54)
		
		1.静默编译在编译时命令行不打印编译信息。

		2.使用方法：编译时make -s，-s会作为MAKEFLAGS传给makefile，在代码作用下XECHO就会变为空，相反XECHO就等于ECHO。

	(2)2种编译方法(78~123代码实现)
		
		原地编译：默认情况下当前文件夹中的.c文件和编译后得到的.o文件会放在同一文件夹。
			
			坏处：
				1.污染了源文件目录。
				2.一套源代码只能按照一种配置和编译方法进行处理。
		
		单独输出文件夹编译：在编译时另外指定一个输出目录存放生成的.o文件和其他文件。

			分析：
				1.uboot(linux kernel)都支持这种输出方式。
		
			具体用法：
				make O=输出目录 disclean
				make O=输出目录 x210_sd_config
				make O=输出目录 all

3.uboot主Makefile分析3
	
	(1)OBJTREE、SRCTREE、TOPDIR(95~97行)
		
		OBJTREE：存放编译出的.o文件目录的根目录。
		
		SRCTREE：存放源代码的根目录。在默认编译下，OBJTREE和SRCTREE相同。

		TOPDIR：最高层目录(主目录)。

	(2)	MKCONFIG(101行)

		Makefile中定义的一个变量，后面使用。它的值是源码根目录SRCTREE下面的mkconfig。mkconfig是一个uboot配置阶段的配置脚本。

	(3)include $(obj)include/config.mk(133行)
		1.obj在-O=xx的编译方式下是OBJTREE根目录。config.mk文件不是源码自带的，要在配置过程中(make x210_sd_config)才会生成。

		2.X210在iNand情况下配置生成的config.mk内容为：
			
			ARCH	= arm
			CPU		= s5pv11x
			BOARD	= x210
			VENDOR	= samsung
			SOC		= s5pv210
			在134行export导出了以上5个变量作为环境变量。可在x210_sd_config(2589行)配置项来设置配置值。

	(4)ARCH CROSS_COMPILE
		
		ARCH：配置过程得到的值，代表当前编译目标CPU的架构的环境变量。

		CROSS_COMPILE：定义交叉编译工具链的前缀。(136~182行)
			原因一：为了在后面加上后缀来定义编译过程中用到的工具链的工具。如：arm-none-linux-gnueabi-gcc。
			原因二：在不同CPU架构上的交叉工具链，只有前缀不一样，后缀一样。
		
			设置方法：可在编译时用make CROSS_COMPILE=xxx来设置。

4.uboot主Makefile分析4
	
	include $(TOPDIR)/config.mk，主目录下的config.mk(185行)

		1.编译工具的定义(config.mk 94~107行)

		2.包含开发板配置项目(config.mk 112行)

			1.autoconfig.mk是配置过程中自动生成的。作用是用来指导uboot的编译工程。文件的内容是若干CONFIG_开头的宏(可以理解为变量)。
			2.这个宏/变量会通过uboot代码中的条件编译来影响uboot编译过程的走向。条件编译也实现了uboot的可移植性。

			3.生成autoconfig.mk的原材料来自源码目录的Include/configs/xxx.h(X210是x210_sd.h)。xxx.h内存放着许多宏定义，这些宏定义就是对当前开发板(X210)的移植。

5.uboot主Makefile分析5
	
	(1)链接脚本u_uboot.lds(config.mk 142~149行)

		1.如果定义了CONFIG_NAND_U_BOOT宏(Nand版本)，则链接脚本叫u-boot-nand.lds；如果未定义这个宏则链接脚本叫u-boot.lds(X210是iNand版本)。 

	(2)TEXT_BASE(config.mk 156~158行)

		1.Makefile在配置X210开发板时，在/board/samsung/x210目录下生成一个文件config.mk。其中的内容是TEXT_BASE = 0xc3e00000。

		2.TEXT_BASE是uboot链接时指定的链接地址。因为uboot启动了虚拟地址映射，所以TEXT_BASE的地址就等于0x23E00000(或0x33E00000)，这取决于uboot做的虚拟地址映射关系。

	(3)makefile的自动推导规则(config.mk 239~256行)

6.uboot主Makefile分析6
	
	(1)主Makefile的第一个目标all(291行)
		
		1.在uboot根目录下make其实就是等于make all。
		
	(2)unconfig(473行)

		1.unconfig是作为各个开发板配置目标的依赖。

		2.在配置X210开发板时：make x210_sd_config。可知x210_sd_config是主Makefile其中一个目标。


