1.4
	
	8.点亮LED_硬件工作原理及原理图查阅
		
		(1)LED物理特性介绍
			
			给LED正负极分别加上正负±电压。
			
		(2)通过查阅原理图了解LED硬件接法
			
			LED D26接法：正极接5V，负极接地，因此这颗LED只要上电就会亮。是电源指示灯。
			
			其他LED的接法：正极接3.3V，负极接SoC上的一个引脚(GPIO)。
			
				D22:	GPJ0_3
				D23:	GPJ0_4
				D24:	GPJ0_5
				D25:	PWMTOUT1(GPD0_1)
			
		(3)分析如何点亮LED(GPIO)
			
			因为正极已经定了3.3V，负极接在了SoC的引脚上，所以可以通过SoC中编程来控制负极输出低电平(0V),这样在正负极就有电压差，LED即可点亮。
			
	9.数据手册查阅及相关寄存器浏览
		
		(1)GPIO概念的引入
			
			General purpose input output 通用输入输出
				
			GPIO就是芯片的引脚(芯片上的引脚有些不是GPIO)，作为GPIO的引脚，编程控制可控制其功能和特点(工作模式)，还可以控制其电压高低。
			
		(2)相关寄存器介绍
			
			1.寄存器是软件操作硬件的接口
			
			2.LED实际是通过GPIO来间接控制的，所以当前我们实际操作的设备是SoC的GPIO。要操作这些GPIO，要通过设置它们的寄存器。
			
			3.查阅数据手册可知，GPJ0相关寄存器有：
				
				GPJ0CON,	(GPJ0 control)GPJ0控制寄存器，用来配置各引脚的工作模式。
				
				GPJ0DAT, 	(GPJ0 data)当引脚配置为input/output模式时，寄存器的相应位和引脚的电平高低对应(高为1，低为0)。
				
				GPJ0PUD,	(pull up down)控制引脚内部弱上拉、下拉
				
				GPJ0DRV, 	(driver)配置GPIO引脚的驱动能力
				
				GPJ0CONPDN	(低功耗模式下的控制寄存器)
				
				GPJ0PUDPDN	(低功耗模式下的上下拉电阻)
			
				实际上真正操作LED的硬件有：GPJ0CON, GPJ0DAT。在驱动LED点亮时，应将GPIO配置为output模式(输出一个高或低电平)。
			
		(3)编程步骤
			
			1.操控GPJ0CON寄存器，选中output模式。
			
			2.操控GPJ0DAT寄存器，相应的位设置为0(输出低电平)。
			
	10.手写汇编点亮LED	
		
		(1)GPxCON、GPxDAT寄存器
			GPJ0端口一共有8个引脚，分别记作：GPJ0_0~GPJ0_7，相关重要寄存器是GPJ0CON、GPJ0DAT。GPJ0CON寄存器中设置了8个引脚的工作模式(32位系统，每个引脚分到4位。如：GPJ0_0对应的位为bit0 ~ bit3)。
			
			给相应的寄存器位写入相应的值，该引脚的硬件就会按照相应的模式去工作。如给bit12~bit15写入0x0001(二进制)，GPI0_3引脚就会成为输入模式。
			
		(2)准备工作
			
			1.确定硬件接法和引脚：GPJ0_3 GPJ0_4 GPJ0_5 低电平亮/高电平灭。
			
			2.GPJ0CON(0xE0200240)寄存器和GPJ0DAT(0xE0200244)寄存器。		
			
			3.工程管理：makefile
			
			分析：
				
				代码任务：把相应数据写入寄存器
			
		(3)编译、下载、运行看结果
		
			编辑时直接用make编译得到led.bin和210.bin。
						
			开发板上按下电源键后4个LED默认是半亮的，当我们下载程序后3个LED更亮，说明程序已经运行了。
			
	11.	实现更复杂的点亮LED效果
		
		(1)完善代码
			
			1. 使用宏定义代替寄存器地址。
			
			2. 用 b . 来实现死循环。
			
			3. .global _start。把_start链接属性改为外部，消除链接时的警告。
			
		(2)只点亮中间1颗LED(两边是熄灭的)。	
			
			1.GPJ0CON不用变，依然是输出模式。
			
			2.GPJ0DAT把GPJ0_3和GPJ0_5改为输出高电平1。
				
				注意：为了让代码更清晰，用(1<<3),(1<<5)分别让GPJ0_3和GPJ0_5对应位变为1。

		(3)写延时函数实现LED闪烁效果
			
			1.延时函数原理
				
				在汇编中，会执行一些没有目的的代码来实现消耗时间、延时的效果。
				
				延时函数：
					delay:
						ldr r2, =100000
						ldr r3, =0x0
					delay_loop:
						sub r2, r2, #1		//让r2不断减1
						cmp r2, r3			//判断r2与r3是否相等
						bne delay_loop		//如果不相等继续执行delay_loop
						mov pc, lr			//如果相等，则跳回之前调用此函数的地址。(用bl调用延时函数)
				
					注意：初始化与循环体要分开。
			
		(4)实现流水灯形式点亮流水灯
			
			1.利用循环与灯闪灯灭实现。
			

			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			