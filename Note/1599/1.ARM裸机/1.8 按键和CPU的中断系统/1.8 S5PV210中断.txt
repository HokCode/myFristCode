1.8	
	4.中断
			
			(1)定义
				
				1.用来解决宏观上的并行需要。宏观就是从整体上看，并行就是多件事情都完成了。
		
				2.微观上的并行是指真正的并行。多个事情精确到每一秒都是真正同时地在进行。有时宏观上是并行，微观上是串行。 
				
				分析：单核CPU实际是无法并行(微观上)的，但是通过中断机制，可以实现假并行(宏观上)。
				
			(2)SoC对中断的实现机制
				
				1.异常向量表是CPU中某些特定地址的特定定义。
		
				2.在CPU设计时，就事先定义了CPU中一些特定地址作为特定异常的入口地址(如定义0x00000000地址为复位异常向量，当发生复位异常时CPU会自动跳转到0x00000000地址执行指令)。
				
				3.软件需要做的就是把处理异常的代码的首地址放在对应异常向量地址(硬件提供)。异常向量表放的是跳转地址。
	
		(3)S5PV210异常向量表
			
			1.异常向量表值各个向量的相对位置是固定的，但是起始地址是不固定的。各种SoC可能不一样，ARM中还可以用户来设置基地址。
	
			2.所有架构CPU实现中断都是通过异常向量表实现的，但是不同CPU异常向量表的构造和位置是不同的。
			
		(4)异常和中断的区别和联系
			
			1.针对SoC：发生复位、软中断、中断、快速中断、取指令异常、数据异常等都统一叫异常。
	
				异常：就是突发事件，打断了CPU的正常常规工作，不得不跳转到异常向量表去执行异常处理程序。
					
				中断：可以理解成中断是异常的一种，一般特指SoC内的内部外设产生的中断或外部中断(SoC的GPIO引脚传回来的中断)。
				
	5.异常向量表的编程处理
		
		(1)像内存一样去访问异常向量表
			
			1.S5PV210的异常向量表可以改变(cp15协处理器)，以适应操作系统的需求。
		
			2.查表可知。iRAM中的异常向量表起始地址为0xd0037400。根据起始地址就可以推算出其他异常的地址了。
		
		(2)函数名的实质就是函数的首地址
			
			1.C语言中，函数名的理解方法和变量名类似。编译器会把这个函数的函数体对应的代码段和函数名(可以看成是符号)对应起来。因为函数名符号只能对应1个地址，所以不能超过4个字节，实际对应的是函数体的首地址。
				
				分析:可以用异常处理程序对应的函数名替代跳转地址，放入异常向量表中(可考虑用(unsigned int)强制类型转换)。
				
			总结：将异常处理程序的首地址和异常向量表绑定后，异常处理初步阶段就完成了。
				
		(3)中断处理有现在汇编中进行
			
			1.中断处理要注意保护现场和恢复现场。	
			
			(当从SVC模式跳到IRQ(低优先级中断)模式时)
			
				保护现场：
					
					1.设置IRQ栈
						
						ldr sp, =IRQ_STACK	//(0xd0037f80)ARM架构是满减栈，取上沿地址。
				
					2.保存LR、保存r0~r12
					
						中断返回地址保存在LR中，CPSR(自动)保存在(IRQ模式)的SPSR中。
						
						sub lr, lr, #4							分析：因为ARM有流水线(取址->解码->执行)，PC上对应的是执行时的地址，多出了8字节。所以SVC下一条要执行的地址是PC-4。注意，ARM是在每条指令末尾(指令执行成功)才检查有无中断的。
						
						stmfd sp!, {r0-r12, lr}	//stm(多内存读取，压栈)，fd(满减栈)，!(sp自动变化))
						
						分析：把r0~r12、lr的数据存到IRQ模式的栈中。
					
					3.调用真正的isr来处理中断
						
						bl irq_handler	//跳转到对应函数。
					
				恢复现场：
					
					1.中断返回，将r0~r12，pc，cpsr一起返回。
					
						ldmfd sp!, {r0-r12, pc}^

						分析：
							ldm(弹栈)
							
							pc(把SVC中断前的下一条指令放入pc)
							
							^(把spsr恢复自动恢复到cpsr)
							
			总结：
				
				保护现场关键：中断处理程序的返回地址，r0~r12，cpsr(自动)的保存	
				
	6.S5PV210的向量中断控制器
		
		(1)可以将异常处理分为2个阶段
			
			1.异常向量表跳转
			
				(1)主要依赖于CPU设计时提供的异常向量表机制。当发生异常，CPU会自动跳转到相关异常向量表入口。 
				
				(2)主要任务是从异常发生到响应异常并且保存/恢复现场、跳转到异常处理程序。
				
			2.进入异常处理程序	
				
				(1)区分多个中断源中究竟哪一个发生了中断，然后调用相应的中断处理程序isr来处理这个中断。
				
		(2)举例：S3C2440的第二阶段处理
			
			1.找到具体哪个中断
				S3C2440的中断控制器中有一个寄存器(32位)，寄存器的每一位对应一个中断源。为了支持更多中断源，2440在一级中断寄存器中有一些中断共用一个bit位(如，AC97和WDT)，对于共用中断，用子中断来区分究竟是哪一个发生了中断。
				
			2.找到对应的isr
			对每个中断都有个编号。进入isr_handler之后先通过查阅中断源寄存器和子中断寄存器(看哪一位为1)确定中断编号，然后用对应编号去isr数组中查阅找到isr地址。
				
				isr数组：中断初始化时实现设计好的。由各个中断的isr函数名组成的数组，通过用中断对应的编号作为索引来查询。
			
			评价：第一个过程中使用子中断相对麻烦。第二个过程计算中断编号很耗费时间。
				
		(3)S5PV210的第二阶段处理过程
			
			1.找到具体哪个中断
				4个中断寄存器，每个32位，每位对应一个中断源。理论上最多支持128个中断，但实际不足。当中断发生时，通过查询4个中断源寄存器(看哪一位被置1)，则这个位对应的寄存器就发生了中断。
				
			2.找到对应的isr
				
				210提供了很多寄存器来解决每个中断源对应isr的寻找问题。当发生相应中断时，硬件会自动将相应isr推入一定的寄存器中，软件只要去对应寄存器执行函数就行了。
				
		总结：
			
			第一阶段：2440和210基本相同(几乎所有CPU第一节吨都相同)。
				
			第二阶段：2440和210彼此不同。各个SoC格局自己对实时性的要求，和支持的中断源的多少，各自发明了各自处理中断，找到中断编号，进一步找到对应isr地址的方式。
				
	7.S5PV210中断处理的主要寄存器
		
		(1)VICnINTENABLE 和 VICnINTENCLEAR
			
			VICnINTENABLE: interrupt enable
			
				负责相应中断的使能，可读可写。
				READ(读)： 0 中断禁止。1 中断可用。
				WRITE(写)：0 无意义。  1 中断可用。
			
			VICnINTENCLEAR:interrupt enable clear
				
				负责相应中断的禁止。
				WRITE(写)：0 无意义。  1 中断禁止。
				
				1.当我们向使能(启用)某个中断时，只要在这个中断编号对应的VICnINTENABLE相应的bit位写1即可；如果我们想禁止某个中断源，只要向VICnINTENCLEAR中相应的位写1即可。
			 
				注意：有的CPU中断使能和禁止使能只有一个寄存器位(2440)。210中断使能和禁止分开为2个寄存器，使能寄存器和禁止寄存器，这样不容易出错。
				
		(2)VICnINTSELECT
			
			1.设置各个中断的模式为irq(0)还是fiq(1)。一般都设置成irq。
			
			2.IRQ和FIQ究竟有何区别
				
				irq：普通中断，
				
				fiq：快速中断，提供一种更快相应处理的中断通道，用于对实时性要求很高的中断源。只能有一个中断源被设置为fiq，其他都是irq。
				
			3.CPU如何做到fiq比irq快。
				
				(1)fiq模式有专用的r8~r12，因此在fiq的isr中可以直接使用r8~r12而不用保存，这就能节省时间。
				
				(2)异常向量表中fiq是最后一个入口，所以不需要跳转，可以直接把中断处理程序代码直接放在异常向量表对应位置(比其他异常少跳转一次)。
				
		(3)VICnIRQSTATUS 和	VICnFIQSTATUS	
				
			1.中断状态寄存器(只读)，当发生中断时，硬件会自动将寄存器对应位置为1，表示中断发生了。软件就是靠这个寄存器来得到中断编号的。
							
		(4)	VICnVECTPRIORITY0~VICnVECTPRIORITY31
				
			1.中断优先级设置寄存器，设置多个中断同时发生时，先处理哪个中断，高优先级中断可以打断低优先级中断，从而嵌套处理中断。
		
		(5)VICnVECTADDR0~VICnVECTADDR31、VICnADDR
		
			1.这些寄存器和210中断处理第二阶段的第二步(找到对应isr)有关。
			
			2.VICnVECTADDR0~VICnVECTADDR31，这32个寄存器分别用来存放各个中断对应的isr的地址，相当于每个中断源都有一个VECTADRR寄存器。所以在设置中断时，直接把中断的isr地址直接放入中断源对应的VECTADDR寄存器即可。
		
			3.VICnADDR里面的内容是由硬件自动设置的。当发生相应中断时，硬件会自动识别硬件编号，并且会自动找到这个中断的VECTADDR寄存器，然后将其读出复制到VICnADDR中，供我们使用。节省了软件查找中断源和isr的时间。		
		