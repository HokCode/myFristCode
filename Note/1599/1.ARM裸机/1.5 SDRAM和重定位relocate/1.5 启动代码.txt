1.5
	1.汇编写启动代码之看门狗
		
		(1)看门狗定时器(watch dog timer)
			
			看门狗是SoC内部的一个定时器(类似于闹钟)，定好时间后看门狗定时器会计时，时间到之前必须去重新置位看门狗定时器，否则系统将会被强制复位。
			
			系统在正常工作时，系统软件会自动置位看门狗(喂狗)，所以看门狗定时器不会复位。但是系统故障(跑飞)后，看门狗在下一个周期复位系统。
			
			所以一般用于人类很少或者很难接触的设备系统。
			
		(2)看门狗硬件物理特性、数据手册
			
			看门狗定时器，其实是一个SoC内部的一个内部外设。
			
		(3)找到相关寄存器
		
			WTCON(0xE270_0000)，其中bit5位是看门狗的开关。
			
			0-Disables	关
			1-Enables	开
			
			代码：
				
				ldr r0, =WTCON
				ldr r1, =0x0
				str r1, [r0]

		(4)关闭关门狗原因
			一般CPU设计，在CPU启动后看门狗默认是工作的，好处是没有空档和漏洞。坏是在启动代码段置位看门狗很麻烦，所以在启动代码前段先关闭关门狗，然后在后面系统启动起来之后再根据需求决定是否打开看门狗(同时置位看门狗)。
			
			在S5PV210内部的iROM代码中，其实已经关闭看门狗了。所以启动代码不用关看门狗。
			
			但是很多CPU内部是没有BL0的，因此要在启动代码前段自己写代码关看门狗。
			
	
	2.汇编写启动代码之设置栈和调用C语言
		
		(1)C语言运行时需要和栈的意义
			
			1.C语言运行时(runtime)需要一定的条件，这些条件由汇编来提供。
			
			2.C语言的运行主要是需要栈，C语言中的局部变量是用栈来实现的。汇编部分需要给C语言预先设置合理合法的栈地址。
			3.在应用程序中，编译器(gcc)在链接我们编写的C程序时会帮我们自动添加一个头，这个头就是引导C程序执行的一段汇编代码。这段汇编代码满足了C语言的运行条件。			
			
		(2)CPU模式和各种模式下的栈	

			1.在ARM中37个寄存器中，每种模式下都有自己独立的sp寄存器(r13)。这样可以保护操作系统内核程序不被用户的应用程序影响。
			
			2.设置栈
				
				(1)先找到当前所在模式
				
					系统在复位后默认进入svc模式(管理模式)。所以可直接设置svc的sp。
			
				(2)设置当前模式下的栈
			
					1.栈必须是当前一段可用的内存(指有被初始化并可以被访问的内存)，而且这段内存不会被程序征用。
			
					2.因为当前CPU刚复位(刚启动)，外部DRAM尚未初始化，可用内存只有内部SRAM(不需初始化即可使用)。
			
					3.在ARM中，ATPCS(程序使用规范)要求满减栈。所以结合memory map可知，svc栈应设置为0xd0037d80。
			
						代码：	
							
							ldr sp, =0xd0037d80
							
			(3)设置栈后调用C程序
				
				1.汇编调用C函数
					
					(1)新建一个C语言源文件(led.c)并修改makefile。
				
					(2)在汇编启动代码设置到栈后，用bl来调用C函数
					
						C函数：
							
							1.因为是IO与内存统一编址，用C语言读写寄存器其实就是读写内存地址。C语言用指针来访问内存。
					
					(3)拓展：volatile
						
						优化：编译器自行判断程序中不必要的步骤并且自动去掉。
						
						但是当一个变量是易变的时候，程序员不希望编译器优化对应的代码。
						
						volatile目的是让编译器不用优化对应的代码。
							
							volatile unsigned int i = 100;
						
	3.汇编写启动代码之开iCache
		
		(1)cache是一种内存，叫高速缓存(相对于ddr)。
			
		(2)因为寄存器与内存ddr之间速度差异太大了，ddr的速度远不能满足寄存器(和cpu)的需求，所以没有cache会拉低整个系统的整体速度。	
			
		整个系统CPU的供应链由：寄存器+cache+DDR+硬盘/flash四阶组成，这样综合兼顾了性能、成本。	
			
		在210内部，有32kb icache和32kb dcache，icache是用来缓存指令的，dcache是用来缓存数据的。
			
		(3)cache意义
			指令平时放在硬盘/flash中，运行时读取到ddr中，再从ddr读给寄存器，再从寄存器送到cpu。但是ddr速度与寄存器(代表cpu)相差太大，ddr会拖慢cpu速度。所以就需要icache。
		
			icache工作时，会事先读取我们cpu正在运行的指令的后几条指令(CPU把这后一条指令作为几率最大的下一条将执行指令)。
			当CPU要执行下一条指令时，cache会先检查自己事先准备的缓存指令中是否有这一条指令。如果有，就直接读给CPU。如果没有，就需要从ddr中重新读取并读给CPU，并清理缓存、重新缓存。
			
		(4)iROM中BL0对cache的操作
			
			1.icache的动作都是自动的。我们所需要做的是打开/关闭icache。
			
			2.在210iROM中，BL0已经打开了icache。
			
				代码：	
					
					mrc p15, 0, r0, c1, c0, 0;	//读取cp15中的c1到r0中
					bic r0, r0, #(1<<12)		//bit12 置0 关闭icache
					orr r0, r0, #(1<<12)		//bit12 置1 开启icache
					mcr p15, 0, r1, c1, c0, 0;
			
			