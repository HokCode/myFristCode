1.2
	
	7.内存映射(地址映射)
		
		ROM：read only memory (硬盘、flash，不能直接通过地址总线读写ROM)
		
		RAM: ramdom access memory(内存随机访问存储器)
		
		IROM：internal rom内部ROM，集成到SoC内部的ROM

		IRAM：internaol ram内部RAM，集成到SoC内部的RAM

		DRAM：dynamic ram	动态RAM	 容量大，价格低，上电后不能直接使用，需要软件初始化。(内存条)
		SRAM：static ram 	静态RAM	 容量小，价格高。不需要软件初始化，上电就能用。
		
		NAND：NAND FLASH
		
		SFR：special function register
		
		SROMC：

	8.内存和外存
		
		(1)
			内存：内部存储器	用来运行程序的	RAM
			
			外存：外部存储器	用来存储东西的	ROM
			
			CPU连接内存和外存的连接方式不同。
			内存需要直接地址访问，所以是通过地址总线&数据总线的总线式访问方式连接的(好处是直接访问、随机访问。坏处是占用CPU的地址空间、大小受限)。

			外存是通过CPU的外存接口来连接(好处是不占地址总线，坏处是访问速度没有总线式快)。
	
		(2)SoC常用外部存储器	
		 
			NorFlash				总线式访问，接到SROM bank，可以直接总线访问，一般用作启动介质。价格贵。
			
			
			NandFlash				
			通过命令接口访问。分为SLC(容量不大，访问稳定性高，但价格高)和MLC(容量大，访问稳定性低，但价格低)。						
			
			SD卡/TF卡/MMC卡			三种类似。
			
			SSD					固态硬盘。SD的e化，embeded。	
			 
			eMMC/iNand/moviNand
									eMMC：embeded MMC，类似SD卡的芯片。减轻CPU工作(目前最好选择)。
				
									iNand：SanDisk公司出产的eMMC。
					
									moviNand：三星公司出产的eMMC。	

			oneNAND					oneNAND是三星公司出的一种NAND。						
			
			SATA硬盘(机械式访问、通过磁存储原理访问、SATA接口)

	9.S5PV210启动过程
		
		外存：
			(1)
				NorFlash：容量小价格高，可以和CPU直接总线相连。所以可用作启动介质，预先写了一段启动代码。
				
				Nandflash(硬盘)：不能作启动介质(太大了)。CPU上电后需要先读取启动代码，这段代码初始化硬盘，硬盘工作后，CPU才可以通过时序接口读写硬盘。

			(2)
				PC机：BIOS(NorFlash) + 硬盘(NandFlash) + 大容量的DRAM(动态内存)
				
				一般的单片机：很小容量的NorFlash + 很小容量的SRAM(static ram)。
				
				嵌入式系统(现在的)：因为NorFlash很贵，所以现在很多嵌入式系统倾向于不用NorFlash。
									
								启动过程：外接大容量Nandflash + 外接大容量DRAM + SoC内置SRAM(相当于IRAM)
							
							上电后，通过一些特殊设计，把Nand中的一段启动代码直接读取到SoC的SRAM中。SRAM可以不通过初始化直接运行，从而可以运行启动代码，初始化Nand和DRAM。
					
	10上.	S5PV210启动过程	
		
			S5PV210：210内置了一块96KB大小的SRAM(IRAM),同时还有一块内置的64KB大小的NorFlash(IROM)。

								启动过程：外接大容量Nandflash + 外接大容量DRAM + SoC内置SRAM(相当于IRAM)
						
						第一步：
							CPU上电后先从内部NorFlash(IROM)中读取预先设置的代码(BL0)，执行。这段IROM做了一些基本的初始化(CPU时钟、关看门狗)。因为这段在IROM的代码是芯片出厂前设置的，只能初始化SoC内部的东西(外接DRAM)。
							
							这段代码会判断我们选择的启动模式(Nand、SD等)，然后到相应的外部存储器中读取第一部分启动代码(BL1,大小为16K)到内部SRAM。
						
						第二步：
							
							从SRAM(IRAM)去运行读取到的BL1，初始化NandFlash(也有可能在IROM已经初始化NandFlash)。然后将BL2读取到SRAM(IRAM)并运行，初始化DRAM(将操作系统OS读到内存DRAM中)。启动OS。
	
						分析：
						
							(1)因为启动代码大小是不定的，所以三星吧启动代码分为两段：BL1、BL2，这两部分协同工作，一起完成启动。

							(2)BL0工作：
								
								1.关看门狗
								
								2.初始化指令cache
								
								3.初始化栈stack
								
								4.初始化堆variable
								
								5.初始化块设备(NANDFlash\MMC等等)复制函数，启动方式的代码库 device copy function
								
								6.设置SoC时钟系统

								7.复制BL1到SRAM(IRAM)16KB

								8.检查BL1的校验和(所有代码加起来的字节数)

								9.安全启动校验

								10.跳转到BL1去执行。
								
			(3)S5PV210二次启动
				
				先1st启动，通过OMpin选择启动介质
				再2nd启动，从SD2
				再Uart启动(串口)
				再USB启动

	11.如何开发板上选择不同启动模式
		
		根据手册拨动拨码开关。

	12.ARM的编程模式和7种工作模式
		
		(1)ARM采用的是32位架构
			
			ARM约定：
					
				Byte：		8bits			字节		
				Halfword:	16bits(2 byte)	半字		
				word:		32 bits(4 byte)	字	CPU能处理的数据位宽
				
			大部分ARM core(不算早期不算后期)提供：
			
				ARM指令集(32-bit)
				Thumb指令集(16-bit)
				Thumb2指令集(16&32bit)
				
		(2)ARM处理器7中工作模式
			
			用户模式
			
				1.User：非特权模式，大部分任务执行在这种模式。
				
			特权模式
			
				异常模式
					2.FIQ:当一个高优先级(fast)中断产生时将会进入这种模式。
					
					3.IRQ:当一个低优先级(normal)中断产生时将会进入这种模式。
					
					4.Supervisor:当复位或软中断指令执行时将会进入这个模式。
					
					5.Abort:当存取异常时将会进入这种模式。(内存坏了，或者地址错了)
					
					6.Undef:当执行未定义指令是将会进入这种模式。
				
				系统模式
					7.System：使用和User模式相同寄存器集的特权模式。

			注意：程序员可以通过代码主动切换工作模式：通过CPSR寄存器；也可以是CPU在某些情况下自动切换。

			(1)CPU为什么设计这种模式
				
				CPU是硬件，OS是软件，软件的设计要依赖硬件的特性，硬件的设计要考虑软件需要，便于实现软件特性。两者都是为了产品服务。

				操作系统有安全级别要求，因此CPU设计多种模式是为了方便操作系统的多种角色安全等级需要。

	13.ARM的37个寄存器详解
		
		(1)通用型寄存器
			
			1.通用型寄存器没有地址，但是每一个都有一个名字。

			2.不同模式底下，可见寄存器不同，最多18个。				
				比如：对于r14这个名字来说，在ARM中共有6个名叫r14(又叫sp)的寄存器，但是在每种特定处理器模式下，只有一个r14是当前可见的，其他r14必须切换到其对应模式下才能看到。这种设计叫影子寄存器(banked regiser)。

				r13：sp，堆栈指针。中断时先把上下程序保护起来。所以不同模式要分开，出现问题是不会受钱牵连。
				
				r14：lr，做返回控制。比如User模式转换其他模式时，把User的返回地址存到User模式的lr里面，返回时可以通过地址返回User模式。做返回控制。比如User模式转换其他模式时，把User的返回地址存到User模式的lr里面，返回时可以通过地址返回User模式。	
				r15：pc，(见下文)。
				
				cpsr：程序状态寄存器。记录CPU运行状态。在User转换到其他模式时，会把cpsr记录的程序状态保存到其他模式的spsr中。
			
			总结：ARM的37个寄存器都是32位长度，其中30个为“通用”型，1个固定用作PC，1个固定用作CPSR，5个固定异常模式下的SPSR。			

		(2)CPSR 程序状态寄存器
			
			bit0~bit4	
				
				Mode位(5位模式位)：处理器(7种)模式位。
			
			bit5：
				
				T位：T=0：处理器处于ARM状态(ARM代码);T=1：处理器处于Thumb状态(Thumb代码)
			
			bit6~bit7：
				
				中断禁止位	I(7)=1：禁止 IRQ(普通中断)
							F(6)=1: 禁止 FRQ(快速中断)
			
			bit24：J位。JAVA加速位。
			
			bit27：Q位。
			
			bit28~bit31：
				
				条件位：N：(为1时)表示运算结果为负 
						Z：(为1时)表示运算结果为零
						C：(为1时)进位标志位有进位
						V：(为1时)进位标志位溢出
						
			例子：
				
				sup 3 3(3 - 3，结果为0，相等)
				BLE branch(跳转) lr equal	当运算结果相等(上一句指令)时，就模式跳转，跳转前把地址存在lr。
				
				CPU通过条件位来判断是否相等，如结果为0(相等时)，Z = 1。这是自动运算的。
				
				
		
		(3)PC(r15) 程序控制寄存器	
			
			1.Program control register。PC指向哪里，CPU就会执行哪条指令。所以程序跳转时就是把目标地址代码放到PC中。
			
			2.整个CPU只有一个PC。

	14.ARM的异常处理
		
		(1)正常工作之外的流程。
		
		(2)异常会打断正在执行的工作，并且一般我们希望异常处理完成后继续回来执行原来的工作。(也叫现场保护，保护中断之前的状态)
		
		(3)中断也是一种异常。

		(4)异常向量表
			
			1.所有的CPU异常向量表，这时CPU设计时就设定好的，是硬件决定的。
			
			2.当异常发生时，CPU会自动动作(PC会跳转到异常向量处处理异常，有时会伴有一些辅助动作)。
			
			3.异常向量表是硬件向软件提供的处理异常的支持。

		(5)ARM的异常处理机制向量表
									
			0x1C FIQ					快速中断
			
			0x18 IRQ					普通中断
			
			0x14 (Reserved)				无用地址
			
			0x10 Data Abort				数据异常
			
			0x08 Software interrupt 	软中断 
			
			0x04 Undefined instruction 	未定义的指令
			
			0x00 Reset 					复位
			
			(地址中放的是跳转指令)

			分析：当异常产生时，ARM core1：
				
				1.拷贝CPSR到SPSR_<mode>(模式位)：保存程序状态
				
				2.设置适当地CPRS位：
					
					(1)T = 0：改变处理器状态，进入ARM态。(不管是当前是Thumb态还是ARM态)
					
					(2)Mode位：改变处理器模式。
					
					(3)(如果需要)设置中断禁止位，禁止相应中断。
					
				3.保存返回地址到lr。
				
				(保护工作做好，跳转前准备就绪)
				
				4.设置PC位相应的异常向量(比如PC跳转到0x18 IRQ普通中断模式)。
			
				5.从SPSR_<mode>恢复CPSR
				
				6.从LR_<mode>恢复PC
				
			注意：这些操作只能在ARM态执行。	

