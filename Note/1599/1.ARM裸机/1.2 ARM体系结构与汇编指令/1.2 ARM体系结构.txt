1.2
	1.可编程器件编程原理
		
	2.ARM汇编指令集堆CPU的意义
		
		(1)	
			语言：可移植性越低，效率越高。(汇编无可移植性、效率最高)。汇编不适合完成大型复杂的项目，更高级语言更适合完成更大、更复杂的项目。
			
			JAVA、C++基本用于应用层。汇编、C基本用于写操作系统，其中操作系统中C占主导地位，因为它保持一定效率之余不会太难写。
		
		(2)汇编的实质是机器指令(机器码)的助记符，是一种低级符号语言。
			
			机器指令集与CPU的APU接口类似。
		
	3.RISC和CISC的区别
		
		(1)CISC	复杂指令集 (英特尔)
			Complex instruction-Set computer
			
			设计理念：用最少的指令来完成任务(一条指令完成一个任务)，所以CISC的CPU本身设计复杂、工艺复杂，耗电，但是编译器好设计。
			
			用起来容易，记指令难。
		
		(2)RISC 精简指令集	(ARM)
			
			Reduced instruction-Set Computer
			
			设计理念：让软件来完成具体任务，CPU本身仅提供基本功能指令集。设计和工艺简单，但编译器的设计难。
	
			用起来难，记指令容易。
	
	4.	统一编址&独立编址
		哈佛结构&冯诺依曼结构
			
		(1)IO
			
			1.什么是IO
				input and output 是输入输出接口，是CPU和其他外部设备(串口、LCD、触摸屏、LED等)之间通信的通道。一遍IO就是指cpu的各种内部或外部外设。
	
			2.CPU访问IO
				
				方法有两种
					
					(1)IO与内存统一编制方式：(RISC)
						
						类似于访问内存的方式，即把外设的寄存器当作一个内存地址来读写。以访问内存相同的方式来操作外设。
						
						IO当作内存来访问，编程简单。但是需要占一定的CPU地址空间，而CPU的地址空间是有限资源。
					
					(2)IO与内存独立编址(非统一编址)(CISC)
					
						使用专门的CPU指令来访问某种特定外设。
						
						不占用CPU地址空间，但是编程模式复杂(要用专门指令访问，CPU设计变复杂)。 
		
		(2)冯诺依曼结构与哈佛结构
			
			1.定义
				
				冯诺依曼结构：程序和数据都放在内存中，彼此不分离的结构。因此安全性和稳定性是个低，好处是处理起来简单(电脑)。
				
				哈佛结构：程序和数据分开独立放在不同的内存块中，彼此完全分离的结构(譬如大部分单片机)。安全性和稳定性高，但是软件处理复杂。程序放在flash(ROM)，数据放在内存(RAM)。
			
	5.软件编程控制硬件的关键——寄存器
		
		(1)寄存器是CPU的硬件设计者制定的，目的是留作外设被编程控制的“活动开关”。

		(2)使用软件编程控制某一硬件，其实就是编程读写该硬件的寄存器。
	
		(3)一般设计寄存器位宽都会与CPU位宽相同，保证访问最高效率。
	
		(4)常见的2类寄存器:
			
			第1种：通用寄存器(ARM中有37个)
				
			这些寄存器的功能还没规定，由程序员用代码规定。
			
			
			第2种：SFR(special function register)， 		
			不在CPU中，而存在于CPU的外设中，我们通过访问外设的SFR来操控这个外设名这就是硬件编程控制的方法。寄存器每一个bit位含义在CPU设计时已经确定了。
	
