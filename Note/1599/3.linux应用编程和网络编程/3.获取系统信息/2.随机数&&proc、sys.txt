5.linux中使用随机数
	
	(1)随机数和伪随机数
		
		1.随机数是指没有任何规律的一组数列，只存在于理论中。
		
		2.伪随机数是通过一些算法得到一个具有随机性的序列。平时说的随机数基本都是指伪随机数。
		
	(2)linux中随机数相关API
		
		1.通过连续多次调用库函数rand可以返回一个伪随机数序列。

		2.srand函数是用来设置rand获取伪随机序列的种子。
	
			int rand(void);

			int rand_r(unsigned int *seedp);

			void srand(unsigned int seed);

	(3)程序实现和缺陷分析解决
		
		1.每次执行程序得到的数都是相同序列的。因为rand内部是通过一个种子(一个int类型的参数1)加上算法得出最终的数。

		2.可通过srand函数来设置rand函数的种子，如：srand(atoi(xxx));atoi是将字符串转成int类型的库函数。

	(4)总结和技巧
		
		1.可用time函数的返回值作为srand的参数，可保证参数不会相同。

	(5)在linux系统中获取真正的随机数
		
		1.linux系统中会收集一些随机发生事件的时间，如：鼠标被动、触摸屏被操作的坐标等。再把时间作为srand的参数从而生成随机数序列。

6.proc文件系统介绍
	
	(1)操作系统级别的调试
		
		1.简单程序单步调试
		
		2.复杂程序printf打印信息调试

		3.框架体系日志记录信息调试

	(2)proc虚拟文件系统的工作原理
		
		1.linux内核过于庞大复杂，向里面添加/更改某个功能可能会引发许多错误，调试就更复杂。
		
		2.proc文件系统的出现就是为了让内核调试更简单。

	(3)proc文件思路
		
		1.在内核中构建一个虚拟文件系统/proc，内核在运行时为将一些关键的数据结构以文件方式呈现在/proc目录中。

		2.所以可通过查看/proc/xxx文件，从而知道内核中特定数据结构的值。通过对比添加新功能前后的不同，可知道新功能的影响。
		
		3./proc中的文件在硬盘中是找不到的。里面的文件相当于一个接口。读取文件时，内核会将其映射为内部一个数据结构被读取并格式化为字符串返回。
		
	(4)proc中的几个文件介绍
				
		/proc/cmdline
			内核被实时传递的参数(uboot传的bootargs)
		
		/proc/cpuinfo
			cpu信息
		
		/proc/devices
			设备信息
		
		/proc/interrupts

7.proc文件系统的使用
	
	(1)proc文件系统使用
	
		1.可在c程序中通过文件IO访问proc中的文件。
	
		2.在shell程序中可直接用cat命令获取处理信息。

	(3)sys文件系统介绍
		
		1.本质上与proc文件系统相同，都是虚拟文件系统。并非硬件中的文件，只是内核中数据结构的可视化。
		
		2./proc中的文件只能读，/sys中的文件可以读和写。可通过写入/sys文件来设置内核中数据结构元素的值。

		3./sys的出现是为了让调试文件更规范。


































































































