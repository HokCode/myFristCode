1.文件IO定义
	
	(1)input/output，可理解为文件读写。

 
2. 文件操作的主要接口API
	
	(1)操作系统API
		
		1.API是一些函数，有linux系统提供支持，给应用层使用。

		2.应用层程序可通过调用API来调用操作系统中的各个功能。

		3.学习一个操作系统，实质是学习使用这个操作系统的API。

	(2)linux常用文件IO接口
		
		open、close、write、read、lseek
		
	(3)文件操作的一般步骤
		
		第一步：open打开一个文件，得到一个文件描述符。
		第二步：对文件进行读写操作，最后close关闭文件。

		1.文件平时是存在块设备中的文件系统中的，称为静态文件。open打开文件时，linux内核中做了以下操作：
			
			第一：在进程中建立一个打开文件的数据结构，记录对应文件；
			
			第二：申请一段内存，将静态文件的内容读取到内存中特定的地址进行管理存放(动态文件)；

			第三：open打开文件后的读写操作，都是针对内存中的动态文件的。

			第四：close关闭动态文件后，内核会把内存中的动态文件内容同步到块设备中的静态文件中。 

	(4)文件描述符概念
		
		1.实质是一个数字，这个数字在一个进程中有特殊含义。

		2.open打开一个文件时，操作系统在内存中构建数据结构来表示这个动态文件，并给应用程序返回一个数字作为文件描述符。这个数字和数据结构挂钩，应用程序如果要操作动态文件，需要用这个数字进行区分。

		3.可理解为：文件描述符fd是用来区分一个程序打开的多个文件的。每个fd对应一个文件。

		注意：
		文件描述符的作用域只在当前进程，其他地方无意义。

3.一个简单的文件读写程序
		
	(1)利用man手册
		
		man 1 xx查linux shell命令
		man 2 xx查API
		man 3 xx查库函数
	
	(2)打开文件和关闭文件
		
		open打开文件
			open("a.txt", O_RDWR);
		
		close关闭文件
			close(fd);			
		1.open会返回一个文件描述符fd，fd的合法范围是0或一个正整数(打开成功)，如果是-1证明文件打开错误。
			
		2.open返回的fd必须记录好，close关闭文件时需要使用。
		
	(3)读取文件内容
		
		ssize_t read(int fd, void *buf, size_t count);
		
		1.参数意义
		
			buf：应用程序提供的内存缓冲区，存储读出的内容。
			count：读取的字节数。
			ssize_f类型：linux内核用typedef重定义的类型，即int

		2.函数返回的值表示成功读取的字节数。

	(4)写文件

		ssize_t write(int fd, const void *buf, size_t count);

		1.与read类似。const作用是保护buf不会修改。

		2.buf的指针类型是void*，空类型。因为不规定buf的内容。

4.open函数的flag详解1
	
	(1)读写权限：O_RDONLY、O_WRONLY、O_RDWE
		
		1.linux中文件有读写权限，open打开文件时可附带一些权限说明。(只读方式打开、只写方式打开、可读可写方式打开)

		2.打开文件后，只能用打开方式对应的权限操作。

	(2)打开存在并有内容文件：O_APPEND、O_TRUNC
		
		O_APPEND：新写入的内容会添加到原来内容的后面。	
			
		O_TRUNC：打开文件时会清空文件内原有内容。
		
		同时配置：与配置O_TRUNC属性效果相同。

	(3)扩展：exit、_exit、_Exit退出进程
		
		1.在程序执行中途某一步骤操作失败会导致后面操作无法进行时，应在失败后退出整个程序。方法：
		
		第一种：return。只能在main函数中使用。
		
			return 0：	程序正常终止
			return -1：	程序异常终止
			
		
		第二种：exit(库函数)、_exit(系统调用)、_Exit(系统调用)

			_exit(-1);

5.open函数的flag详解2
	
	(1)打开不存在的文件：O_CREAT、O_EXCL
		
		O_CREAT：如果文件不存在，打开文件前自动创建文件。如果文件存在，向文件写入时会把原来内容破坏。
		
		O_CREAT和O_EXCL结合使用：如果打开的文件已存在，会报错。

		mode：open函数的第三个参数。在flag为O_CREAT时用于指定所创文件的权限。如：
			
			mode=0666，表示创建的文件可读可写不可执行。

	(2)O_NONBLOCK
		
		1.阻塞与非阻塞(排队与等下再来)
			
			阻塞式：调用阻塞式函数时当前进程可能会被卡主。函数需要完成的任务条件尚未具备，函数不能立即返回。

			非阻塞式：调用非阻塞式函数会立即返回，但未必已经完成任务。

		2.操作系统提供的API和API封装而成的库函数，有许多本身已被设计为阻塞式或非阻塞式。

		3.打开一个文件默认方式是阻塞式的，用O_NONBLOCK则会以非阻塞式打开。

		注意：
		阻塞与非阻塞概念只用于设备文件，不用于普通文件。

	(3)O_SYNC
		
		1.使用write时用O_SYNC标志位，每次写入都会直到完成从缓冲区写入硬盘才返回应用层。
		
		2.无O_SYNC是write时只会将内容写入底层缓冲区buf即可返回。操作系统对应的API和OS中读取硬盘等底层硬件的代码会在合适的时候将buf中的内容一次性的同步到硬盘。
