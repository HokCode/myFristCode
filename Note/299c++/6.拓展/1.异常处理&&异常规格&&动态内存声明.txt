1.异常处理深度解析
	
	<cstdlib>
	<exception>
	
	(1)异常被抛到main函数

		1.如果异常无法被处理，terminate()结束函数会被自动调用。
		
		2.默认情况下。terminate()会调用库函数abort()终止程序。
		
		3.c++支持自定义最终处理的结束函数替换terminate()。
		
	(2)	terminate()函数的替换
		
		1.自定义一个无返回值无参数的函数
			
			-不能抛出任何异常
			
			-必须以某种方式结束当前程序(OS之上的应用程序会自动结束当前程序)
		
		2.调用set_terminate()设置自定义的结束函数
			
			-参数类型为void(*)()
			
			-返回值为默认的terminate()函数入口地址

	题目：析构函数中抛出异常
		
		1.有可能导致系统资源不能得到释放。
		
		2.有可能导致terminate()被多次调用。
		
		3.所以析构函数中不允许抛出异常。

2.异常规格说明

	<cstdlib>
	<exception>
	
	(1)异常声明
		
		1.写在函数声明参数列表的后面。
			
			//可能抛出异常
			void func1() 	

			//只能抛出char、int类型的异常
			void func2() throw(char, int)
			
			//不会抛出异常
			void func3() throw()

	(2)异常规格说明意义
		
		1.提示函数调用者做好异常处理的准备。
		
		2.提示函数的维护者不要抛出其他异常。
		
		3.异常规格说明是函数接口的一部分。

	(3)抛出声明之外的异常
		
		1.函数抛出的异常不在规格说明中，全局unexpected()被调用。
		
		2.默认的unexpected()函数会调用全局的terminate()函数。
		
		3.可以自定义函数替换默认的unexpected()函数实现。

		注意：并非所有c++编译器都支持这个标准行为。

	(4)unexpected()函数的替换
		
		1.自定义一个无返回无参数的函数
			
			-能够再次抛出异常
			
				当异常符合触发函数的异常规格说明时，恢复程序执行.
				
				否则，调用全局terminate()函数结束程序。

			-调用set_unexpected()设置自定义的异常函数
				
				参数类型为void(*)()。
				
				返回值为默认的unexpected()函数入口地址。

3.动态内存申请的结果
	
	(1)new关键字申请失败时(根据编译器不同)
		
		1.两种结果：
		
			-返回NULL值(老编译器)
			
			-抛出std::bad_alloc异常(现代编译器)

		2.分析new在c++规范中的标准行为
			
			-如果空间不足，会调用全局的new_handler()函数。
			
			-new_handler()函数值抛出std::bad_alloc异常。
			
			-可以自定义new_handler()函数，处理默认的new内存分配失败的情况。(<new>)

	(2)解决申请内存失败方案
		
		1.全局范围(不推荐)
		
			-重新定义new/delete的实现，不抛出异常。
			-自定义new_handler()函数，不抛出异常。
			
		2.类层次范围
			
			-针对一个类重载new/delete，不抛出异常。
			
		3.单次动态内存分配
			
			-使用nothrow参数，指明new不抛出异常。使用例子：
				
			int*p = new(nothrow) int[10];
			delete[] p;
	
		拓展new用法：
			
			Type buf[2] = {0};
			Type* pt = new(buf) Type();
			
			这种写法可以自定义指定new申请的内存。如果是类或结构体，需要自行显式调用析构函数。

	(3)实验结论
			
		1.并非所有的编译器都遵循c++的标准规范。
		
		2.编译器可能重定义new的实现，并在实现中抛出bad_alloc。
		
		3.编译器的默认实现中，可能没有设置全局的new_handler()函数(如：g++、visual studio)。

		4.考虑new的具体细节可提高代码的移植性。


