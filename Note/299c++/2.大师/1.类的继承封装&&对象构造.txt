13.面向对象基本概念
	
	(1)类和对象
		
		1.类：指的是一类事物，是一个抽象的概念。用于描述一类事物所特有的属性和行为。
		
		2.对象：指的是属于某个类的具体实体。拥有所属类中描述的一切属性和行为。

		3.类是一种模型，这种模型可以创建出不同的对象实体；对象实体是类模型的一个具体事例。

14.面向对象基本概念

	(1)继承
		
		1.从已存在类细分出来的类和原类之间有继承关系。
		
		2.继承的类(子类)拥有原类(父类)的所有属性和行为。

	(2)组成
		
		1.一些类的存在必须依赖于其他的类，这种关系叫组合。如：内存、cpu等组成了电脑这个类。
		
		2.组合的类在某一个局部上由其他的类组成。组合关系的类同生死、共存亡。

	(3)类的表示法与继承
		
		父进程：
			struct Father
			{
				int strong;
				
			};
		子进程：
			struct Son : Father
			{
				int handsome;
			};

15.类与封装
	
	(1)封装的意义与实现
		
		1.封装机制让使用方式和内部细节相分离。
		
		2.c++通过定义类成员的访问级别实现封装机制。
	
	(2)类中定义属性和行为(变量和函数)的公开级别

		1.public修饰的变量和函数：可在类的内部或外界被访问或调用。
		
		2.private修饰的变量和函数：只能在类的内部被访问或调用。

	(3)类的作用域
		
		1.类成员的作用域都只在类的内部，外部无法直接访问，需要借用类对象访问。
		
		2.类成员的作用域与访问级别无关，访问级别是针对类外部的。

16.类的真正形态
	
	(1)新关键字class
		
		1.c++中提供了新的关键字class用于类定义。
		
		2.用class定义类时默认的访问级别是private。

		3.c++中用class定义类。

	(2)c++中的类支持声明和实现的分离
		
		1.在头文件中声明类。
		
		2.在源文件中实现类。

17.对象的构造1
	
	(1)对象的初始化
		
		1.在类中提供一个public的initialize函数对对象成员进行初始化。
		
		2.但必须每次都在调用成员对象成员前调用initialize函数，容易不错。

	(2)构造函数
		
		1.构造函数会在对象初始化时自动被调用，构造函数的函数名与类名相同。

		2.构造函数没有返回值，对象赋值时不会被自动调用。

18.对象的构造2
	
	(1)带参数的构造函数
		
		1.构造函数可根据需要定义参数。
		
		2.一个类中可存在多个重载的构造函数。
				
		定义类：
			class Test 
			{
			public:
				Test(){}
				Test(int v){}
			};
			
		向构造函数传参：
			Test t1(1);
			Test t2 = 1;
				

	(2)对象的定义和声明
		
		1.对象定义：申请对象的空间并调用构造函数。
		
			Test t;
		
		2.对象声明：告诉编译器存在这样一个对象。

			extern Test T;

	(3)构造函数的调用
		
		1.特殊情况下，需要手工调用构造函数。在创建类数组时，可以这样在初始化时调用构造函数：

			Test ta[3] = (Test(), Test(1), Test(2));

19.对象的构造3

	(1)2种特殊的构造函数
	
		1.无参构造函：当类中没有定义构造函数时，编译器默认提供一个无参构造函数，函数体为空。
		
		2.拷贝构造函数：当类中没有定义拷贝构造函数时，编译器默认提供一个拷贝构造函数，函数中为类中各成员变量的值。

		3.当类中已写了拷贝构造函数，编译器就不会提供无参构造函数，需要自己编写。

	(2)拷贝构造函数的意义
		
		1.浅拷贝：单纯的值相同。拷贝后对象的物理状态相同，如：复制的指针会指向同一个地址。编译器提供的拷贝构造函数只进行浅拷贝。
		
		2.深拷贝：值相同，但对应的地址不一样。拷贝后对象的逻辑状态相同。当对象中有成员指代了系统中的资源，则需要深拷贝。

		3.一般在自定义拷贝构造函数时，必然需要实现深拷贝。

