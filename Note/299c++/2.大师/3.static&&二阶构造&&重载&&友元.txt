25.static静态成员变量
	
	(1)静态成员变量特性
		
		1.属于整个类所有，生命期不依赖于任何对象。
		
		2.可通过类名直接访问公有(public)静态成员变量。
		
		3.所有对象共享类的静态成员变量，可通过对象名访问。
		

	(2)静态成员变量定义

		1.定义时通过static关键字修饰。
		
		2.需要类外单独分配空间，不占用对象空间。
		
		3.与全局变量和静态局部变量一样存储在全局数据区。
		
		4.定义时要在全局空间中表明静态成员变量：
			
			Type ClassName::VerName(静态成员变量) = value(初始值);

26.static静态成员函数
	
	(1)静态成员函数特性
		
		(1)类中特殊的成员函数，属于整个类所有。
		
		(2)可通过类名或对象名访问静态成员函数。
		
		(3)静态成员函数没有隐藏的this指针，只能访问静态成员变量和静态成员函数。

	(2)静态成员函数定义

		(1)定义时在Type前端加入static关键字修饰。

27.二阶构造模式
	
	(1)构造函数

		1.只提供自动初始化成员变量的机会。
		
		2.不能保证初始化逻辑一定成功，执行return语句后构造函数立即结束。

		3.构造函数只是决定对象的初始状态，不是决定对象的诞生

	(2)半成品对象
		
		1.初始化操作不能按照预期完成而得到的对象。

	(3)构造过程分类
		
		第一阶段(构造函数ClassName)：资源无关的初始化操作。不可能出现异常情况的操作。
		
		第二阶段(成员函数construct)：使用系统资源的操作。如：内存申请、访问文件，可能出现异常情况。

		分析：可通过将构造过程分成两个阶段，并让函数判断是否异常情况，从而避免半成品对象对软件开发的危害。

	总结：软件开发通常把对象放入堆内存中。

28.友元
	
	(1)友元定义
		
		1.c++中的一种关系，发生在函数与类之间或类与类之间。
		
		2.单向关系，不能传递。

	(2)friend
		
		1.friend关键字声明友元。
		
		2.友元不受类中访问级别的限制，可以直接访问具体类的所有成员。

	(3)友元的缺陷
		
		1.破坏了面向对象的封装性。
		
		2.在实际产品中的高效是得不偿失的，现代软件工程中已经逐渐被遗弃。

29.类中函数重载
	
	(1)回顾重载规则
		
		1.函数名和参数列表是唯一标识。
		
		2.函数重载必须发生在同一个作用域中。

	(2)函数重载的意义
		
		1.通过函数名对函数功能进行提示。
		
		2.通过参数列表对函数用法进行提示。
		
		3.扩展系统中已存在的函数功能。

	(3)总结
		
		1.类中成员函数之间可以重载。
		
		2.全局函数和成员函数不能构成时重载关系。

30.操作符重载的概念
	
	(1)operator关键字
		
		Type operator Sign(const Type p1, const Type p2)
		{
			Type ret;
			
			return ret;
		}
			
		1.Sign:系统预定义的操作符，如：+、-、*、/。

		2.可将操作符重载函数定义为类的成员函数，不需要依赖友元。
		
		3.编译器会优先选择类的成员函数执行。


