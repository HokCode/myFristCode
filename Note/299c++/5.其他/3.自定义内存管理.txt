69.自定义内存管理
		
	题目一：统计对象成员变量被访问的次数。
	(1)mutable关键字
		
		1.为了突破const函数的限制而设计的。
		
		2.mutable成员变量将永远处于可改变的状态。
		
		3.实际项目开发中不能滥用mutable。

	(2)mutable深入分析
	
		1.mutable成员变量破坏了只读对象的内部状态。
		
		2.mutable成员变量的出现无法保证状态不变性。

	题目二：new关键字创建出的对象位于什么地方。
	(1)new/delete的本质
		
		1.c++预定义的操作符。
		
		-new：获取足够大的内存空间(默认为堆空间)。

		-delete：归还对象所占用的空间(默认为堆空间)。

	(2)重载new/delete操作符

		-全局重载：不推荐。
		
		-局部重载：针对具体类进行重载。
		
		1.重载new/delete操作符可以改变动态对象创建时的内存分配方式(堆之外)。

		2.重载new/delete操作符的函数默认为静态成员函数。

			void* operator new(unsigned int size)
			{				
			}
			size：代表需要获取的内存大小。

			void operator delete(void* p)
			{		
			}
			p:代表对象的地址。

		3.可通过重载函数让new申请的空间位于静态存储区。

	题目三：如何在指定的地址上创建c++对象。
		
		1.重载new/delete操作符。
	
	
	new[]/delete[]与new/delete的区别
	
	(1)new[]和delete[]

		1.动态对象数组创建通过new[]完成。
		
		2.动态对象数组销毁通过delete[]完成。

		3.两者也可以通过重载来改变内存管理方式。

	(2)new[]
		
		1.new[]实际返回的内存空间可能比期望的要多。
		
		2.多的空间用于保存对象数组的数组信息(数组长度)。
		
		3.数组信息用于确定构造函数和析构函数的调用次数。


