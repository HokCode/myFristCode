60.数组类模板1
	
	(1)模板参数
		
		1.模板参数可以是数值型参数(非类型参数)
			
			template
			<typename T, int N>
			void func()
			{
				T a[N];
			}

			func<double, 10>();

		2.模板参数会再编译阶段被处理，所以在编译阶段必须唯一确定。变量、浮点数、类对象不能作为模板参数。

			浮点数：在计算机内部中的表示是不精确的。
		
	(2)最快速方法求出从1加到N的值：
		
		template
		< int N >
		class Sum
		{
		public:
			static const int value = Sum<N - 1>::value + N;
		}

		template
		< >
		class Sum<1>
		{
		public:
			static const int value = 1;
		}

61.智能指针类模板

	(1)智能指针的意义
		
		1.现代c++开发库中最重要的类模板之一。
		
		2.c++中自动内存管理的主要手段，很大程度上避开内存相关的问题。

	(2)STL标准库中的智能指针auto_ptr(<memory>)
		
		1.生命周期结束时，销毁指向的内存空间。
		
		2.不能指向堆数组，只能指向堆对象(空间)。
		
		3.一片堆空间只属于一个智能指针对象，多个智能指针对象不能指向同一片堆空间。

		4.使用语法：
			
			auto_ptr<Test> pt(new Test());

			auto_ptr<Test> pt1(pt);		//此语句会导致所有权转移
			
	(3)STL标准库的其他智能指针
		
		-shared ptr
			带有引用计数机制，支持多个指针对象指向同一个内存。
			
		-weak ptr
			配合shared ptr引入的智能指针
			
		-unique ptr
			一个指针对象指向一片内存空间，但不能所有权转移。即不能拷贝构造和赋值。

61.智能指针类模板2
	
	(1)Qt中的智能指针(<Qpointer>)
		
	-Qpointer
		
		1.当其指向的对象被销毁时，它会被自动置空。
		
		2.但指针生命周期结束后不会自动销毁所指向的对象。
		
		3.使用例子：
			
			Qpointer<Test> pt(new Test("name"));
			delete pt;	//删除对象堆空间，pt被置空。

	-QSharedPointer
		
		1.引用计数型智能指针。
		
		2.可以被自由地拷贝和赋值。
		
		3.当引用计数为0时才删除指向的对象。当指针指向某个对象时，会把对象的引用计数+1，相反生命结束时就会-1。

		4.使用例子：
			
			QSharedPointer<Test> pt(new Test("name"));

		5.自行创建智能指针类模板

62.单例类模板
	
	(1)单例模式
		
		1.让某些特定类只能定义一个对象。

		2.通过单例模式得到的对象生命周期与系统相同，所以不需要释放。

	(2)单例类模板	
		
		1.可以将单例模式相关的代码抽象成类模板。
		
		2.在需要使用单例模式的类时可直接使用单例模板。


