49.多态的概念和意义
	
	(1)多态的概念
		
		1.根据实际的对象类型决定函数调用的具体目标。
		
		2.同样的调用语句在实际运行时有多种不同的表现形态。

	(2)virtual关键字
		
		1.用virtual声明的函数被重写后具有多态特性。
		
		2.被virtual声明的函数叫做虚函数。

		3.如果函数在父类已用virtual声明，子类中就不用写。

	(3)多态的意义
		
		1.在程序运行过程中展现出动态的特性。
		
		2.函数重写必须多态实现才有意义。
		
		3.多态是面向对象组件化程序设计的基础特性。

	(4)理论概念
		
		-静态联编
			
			在程序的编译期间就能确定具体的函数调用。(函数重载)

		-动态联编
			
			在程序实际运行后才能确定具体的函数调用。(函数重写)
			
	(5)c++多态的实现原理——虚函数表
		
		1.当类中声明虚函数时，编译器会在类中生成一个虚函数表。表中存储成员函数地址。虚函数表由编译器自动生成和维护。
		
		2.存在虚函数时，每个对象中都被加一个指向虚函数表的指针。
		
		3.当调用虚函数时，编译器会在当前对象查找指向对应虚函数表的指针，通过虚函数表中的函数地址调用对应的函数。

50.c++对象模型分析1

	(1)对象占用内存
		
		1.对象的大小只代表成员变量的大小。

	(2)运行时对象退化为结构体形式	
		
		1.所有成员变量在内存中依次排布。
		
		2.可通过内存地址直接访问成员变量，访问权限关键字在运行时失效。

	(3)类中成员函数	
		
		1.与成员函数在内存中分开存放。
		
		2.位于代码段，调用时对象地址作为参数隐式传递。
		
		3.通过对象地址地址访问成员变量。

51.c++对象模型分析2

	(1)继承中的对象模型
		
		1.子类是由父类成员叠加子类新成员得到的。

	(2)虚函数指针
		
		1.当对象存在虚函数时，编译器会给对象加一个指向虚函数列表的指针。所以大小多4个字节。

		2.加的指针会放在最初的4个字节处。

52.抽象类和接口
	
	(1)抽象类
		
		1.可用于表示现实世界中的抽象概念。
		
		2.只能定义类型，不能用于定义对象。
		
		3.只能被继承并重写相关函数。
		
		4.特点：类中相关函数没有完整的实现。
		
		5.c++中没有抽象类的概念。

	(2)c++中实现抽象类
		
		1.c++中通过纯虚函数实现抽象类。
		
		2.纯虚函数是指定义原型的成员函数。
		
		3.存在纯虚函数的c++类就是抽象类。

	(3)纯虚函数的语法规则
		
		class Shape
		{
		public:
			virtual double area() = 0;
		}

		1."=0"用于向编译器表明当前是声明纯虚数，因此不需定义函数体。

	(4)称为接口的类
		
		1.类中没用定义任何的成员变量。
		
		2.所有的成员函数都是公有的。
		
		3.所有的成员函数都是纯虚函数。
		
		4.接口是一种特殊的抽象类。

